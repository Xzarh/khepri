/**
 * 
 */
package (
    optimize)
with
    import 'neith::tree' tree,
    import 'neith::zipper' zipper,

    import 'ecma-ast-zipper' {ecmaZipper},
    
    import 'ecma-ast::node' {modify, Node},
    import 'ecma-ast::value' ast_value,
    import 'ecma-ast::declaration' ast_declaration,
    import 'ecma-ast::statement' ast_statement,
    import 'ecma-ast::expression' ast_expression
in {

var concat = \args(...) ->
    [].concat.apply([], args);
    

var map = \f, x -> [].map.call(x, f);
var reduce = Function.prototype.call.bind(Array.prototype.reduce);

var flatten = \x ->
    ?Array.isArray(x) 
        :[].concat.apply([], x.map(flatten))
        :x;

/*
 ******************************************************************************/
var peepholes = {};

var addPeephole = \types, up, condition, f -> {
    var entry = {
        'condition': condition,
        'map': f,
        'up': up
    };
    
    types.forEach <|\ type -> {
        peepholes.(type) = ?peepholes.(type)
            :peepholes.(type).concat(entry)
            :[entry];
    };
};

/* Peepholes
 ******************************************************************************/
/**
 * Filter out empty variable declarators.
 */
addPeephole(['VariableDeclaration'], false,
    \_ -> true, 
    \node -> let
        declarations = node.declarations.filter(\x -> !!x)
    in
        modify(node, {
            'declarations': declarations
        }, {}));

/**
 * Remove empty Variable declarations.
 */
addPeephole(['VariableDeclaration'], true,
    \node -> !node.declarations.length,
    \_ -> null);

/**
 * Reduce block statements
 */
addPeephole(['Program', 'BlockStatement'], true,
    \_ -> true,
    \node ->
        modify(node, {
            'body': flatten(node.body.map(\x ->
                ?x && x.type === 'BlockStatement' :x.body :x))
        }, {}));

/**
 * Merge var declarations
 */
addPeephole(['Program', 'BlockStatement'], true,
    \_ -> true,
    \node ->
        modify(node, {
            'body': node.body.reduceRight(\p c ->
                ?(c && c.type === 'VariableDeclaration' && p.length && p.(0) && p.(0).type === 'VariableDeclaration')
                    :concat(modify(c, {
                        'declarations': concat(c.declarations, p.(0).declarations)
                    }, {}), p.slice(1))
                    :concat(c, p),
                [])
            }, {}));

/**
 * Remove top level empty statements
 */
addPeephole(['Program', 'BlockStatement'], true,
    \_ -> true,
    \node ->
        modify(node, {
            'body': flatten(node.body.map(\x ->
                ?!x || x.type === 'EmptyStatement' :[] :x))
            }, {}));

/**
 * Combine binary arithmetic operations on primitive literals */
let
    arithmetic = {
        '+': (+),
        '-': (-),
        '*': (*),
        '/': (/),
        '%': ('%'),
        '<<': (<<),
        '>>': (>>),
        '>>>': (>>>),
        '<': (<),
        '>': (>),
        '<=': (<=),
        '>=': (>=),
        '||': (||),
        '&&': (&&)},
    
    isPrimitive = \node ->
        node.type === 'Literal' && (
            node.kind === 'string'
            || node.kind === 'number'
            || node.kind === 'boolean'
            || node.kind === 'null')
in
    addPeephole(['BinaryExpression', 'LogicalExpression'], true,
        \{operator left right} ->
            arithmetic.(operator)
            && isPrimitive(left)
            && isPrimitive(right),
        
        \{operator left right} -> let
            value = arithmetic.(operator)(left.value, right.value)
        in
            ast_value.Literal.create(null, typeof value, value));

/**
 * Combine simple unary operations on primitive literals */
let
    arithmetic = {
        '!': (!),
        '~': (~),
        'typeof': (typeof),
        '+': (++),
        '-': (--)},
    
    isPrimitive = \node ->
        node.type === 'Literal' && (
            node.kind === 'string'
            || node.kind === 'number'
            || node.kind === 'boolean'
            || node.kind === 'null')
in
    addPeephole(['UnaryExpression'], true,
        \{operator argument} ->
            arithmetic.(operator)
            && isPrimitive(argument),
        
        \{operator argument} -> let
            value = arithmetic.(operator)(argument.value)
        in
            ast_value.Literal.create(null, typeof value, value));

/* Interface
 ******************************************************************************/
var transform = \node -> {
    var transforms = (peepholes.(node.type) || []).filter(\x -> x.condition(node));
    var down = transforms.filter(\x -> !x.up);
    var up = transforms.filter(\x -> x.up);

    return down.reduce(\p c -> c.map(p, transform), node);
};

var transformDown = \node -> {
    var transforms = (peepholes.(node.type) || []).filter(\x -> !x.up && x.condition(node));
    return transforms.reduce(\p c -> c.map(p, transformDown), node);
};

var transformUp = \node -> {
    var transforms = (peepholes.(node.type) || []).filter(\x -> x.up && x.condition(node));
    return transforms.reduce(\p c -> c.map(p, transformUp), node);
};

var opt = \z -> {
    var t = tree.modifyNode(\node -> (node && transformDown(node)), z);
    
    if (zipper.isLeaf(t)) {
        do {
            t = tree.modifyNode(\node -> (node && transformUp(node)), t);
            if (zipper.isLast(t)) {
                if (zipper.isRoot(t))
                    return t;
                t = zipper.up(t);
            } else
                return opt(zipper.right(t));
        } while (true);
    }
    return opt(zipper.down(t));
};

optimize = \{options ast} ->
    ({
        'options': options,
        'ast': opt(ecmaZipper(ast))
            |> zipper.root
            |> tree.node});

}
