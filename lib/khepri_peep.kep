/**
 * 
 */
package (
    optimize)
with
    import 'neith::tree' tree,
    import 'neith::walk' {walk},
    import 'neith::zipper' zipper,

    import 'khepri-ast-zipper' {khepriZipper},
    
    import 'khepri-ast::node' {modify Node setUserData},
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value
in {

var concat = Array.prototype.concat.bind([]);

var map = \f, x -> [].map.call(x, f);
var reduce = Function.prototype.call.bind(Array.prototype.reduce);

var flatten = \x ->
    ?Array.isArray(x)
        :reduce(x, \p, c -> p.concat(c), [])
        :x;

/*
 ******************************************************************************/
var peepholes = {};

var addPeephole = \types, up, condition, f -> {
    var entry = {
        'condition': condition,
        'map': f,
        'up': up
    };
    
    types.forEach <|\ type -> {
        peepholes.(type) = ?peepholes.(type)
            :peepholes.(type).concat(entry)
            :[entry];
    };
};
/* Peepholes
 ******************************************************************************/
/**
 * Rewrite `return let` to a with statement.
 */
addPeephole(['ReturnStatement'], false,
    \node ->
        (node.argument && node.argument.type === 'LetExpression'),
    \node ->
        ast_statement.WithStatement.create(null,
            node.argument.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ReturnStatement.create(node.loc, node.argument.body)])));

/**
 * Rewrite `\...-> let` to a with statement.
 */
addPeephole(['FunctionExpression'], false,
    \node ->
        (node.body.type === 'LetExpression'),
    \node ->
        ast_expression.FunctionExpression.create(null,
            node.id,
            node.params,
            ast_statement.BlockStatement.create(null, [
                ast_statement.WithStatement.create(null,
                    node.body.bindings,
                    ast_statement.BlockStatement.create(null, 
                        [ast_statement.ReturnStatement.create(node.loc, node.body.body)]))])));

/**
 * Rewrite top level let expressions to with statements.
 */
addPeephole(['ExpressionStatement'], true,
    \node ->
        (node.expression && node.expression.type === 'LetExpression'),
    \node ->
        ast_statement.WithStatement.create(null,
            node.expression.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ExpressionStatement.create(node.loc, node.expression.body)])));

/**
 * Rewrite top level let expressions to with statements.
 */
addPeephole(['ExpressionStatement'], true,
    \node ->
        (  node.expression
        && node.expression.type === 'AssignmentExpression'
        && node.expression.right.type === 'LetExpression'),
    \node ->
        ast_statement.WithStatement.create(null,
            node.expression.right.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ExpressionStatement.create(node.loc,
                    ast_expression.AssignmentExpression.create(node.expression.loc, node.expression.operator,
                        node.expression.left,
                        node.expression.right.body))])));


/**
 * Convert array patterns to object patterns
 */
addPeephole(['ArrayPattern'], false,
    \_ -> true,
    \{loc elements ud} ->
        setUserData(
            ast_pattern.ObjectPattern.create(loc,
                map(\x, i ->
                    ast_pattern.ObjectPatternElement.create(null,
                        ast_value.Literal.create(null, 'number', i),
                        x),
                    elements)),
            ud));

/**
 * Normalize object patterns to ('key': pattern) form.
 */
addPeephole(['ObjectPatternElement'], false,
    \node -> !node.target,
    \node#{loc key} -> {
        switch(key.type) {
        case 'IdentifierPattern':
            return ast_pattern.ObjectPatternElement.create(null,
                ast_value.Literal.create(null, 'string', key.id.name),
                key);
            
        case 'AsPattern':
            return ast_pattern.ObjectPatternElement.create(null,
                ast_value.Literal.create(null, 'string', key.id.id.name),
                key);
            
        default:
            return node;
        }
    });


/**
 * Flatten currying of curry.
 */
addPeephole(['CurryExpression'], true,
    \node -> node.base.type === 'CurryExpression',
    \node ->
        ast_expression.CurryExpression.create(null,
            node.base.base,
            concat(
                node.base.args,
                node.args)));

/**
 * Rewrite left pipe of curried expression to a call.
 */
addPeephole(['BinaryExpression'], true,
    \node ->
        (node.operator === '|>'
        &&  (  node.right.type === 'CurryExpression' 
            || node.right.type === 'BinaryOperatorExpression'
            || node.right.type === 'UnaryOperatorExpression'
            || node.right.type === 'TernaryOperatorExpression')),
    \node ->
        ast_expression.CallExpression.create(null,
            ?node.right.type === 'CurryExpression'
                :node.right.base
                :node.right,
            concat(
                node.right.args || [],
                node.left)));

/**
 * Rewrite right pipe of curried expression to a call.
 */
addPeephole(['BinaryExpression'], true,
    \{operator left} ->
        (operator === '<|'
        &&  (  left.type === 'CurryExpression'
            || left.type === 'BinaryOperatorExpression'
            || left.type === 'UnaryOperatorExpression'
            || left.type === 'TernaryOperatorExpression')),
    
    \node ->
        ast_expression.CallExpression.create(null,
            ?node.left.type === 'CurryExpression'
                :node.left.base
                :node.left,
            concat(
                node.left.args || [],
                node.right)));

/* Interface
 ******************************************************************************/
var transformDown = \node -> {
    var transforms = (peepholes.(node.type) || []).filter(\x -> !x.up && x.condition(node));
    return transforms.reduce(\p c -> c.map(p), node);
};

var transformUp = \node -> {
    var transforms = (peepholes.(node.type) || []).filter(\x -> x.up && x.condition(node));
    return transforms.reduce(\p c -> c.map(p), node);
};

var opt = walk
    @(tree.modifyNode @ \node -> (node && transformDown(node)))
    @(tree.modifyNode @ \node -> (node && transformUp(node)));

optimize = \{options ast} ->
    ({
        'options': options,
        'ast': (opt(khepriZipper(ast))
            |> zipper.root
            |> tree.node) });

}
