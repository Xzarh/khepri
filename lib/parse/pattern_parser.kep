/**
 * @fileOverview Khepri patterns parsers.
 */
package (
    pattern,
    identifierPattern,
    ellipsisPattern,
    importPattern,
    arrayPattern,
    objectPattern)
with
    import 'parse/parse' {always, attempt, bind, binds, choice, eager, either, enumeration, next, optional, Parser},
    import 'parse/lang' {between, sepBy1},
    import 'ecma/parse/common' {node, nodea},
    import 'ecma/parse/token_parser' {keyword, punctuator},
    import 'khepri_ast/pattern' ast_pattern,
    import  'khepri/parse/value_parser' {identifier, stringLiteral}
in {

/* Forward
 ******************************************************************************/
pattern = \... -> pattern.apply(undefined, arguments);

/* Parsers
 ******************************************************************************/
// Identifier Pattern
////////////////////////////////////////
identifierPattern = Parser('Identifier Pattern',
    bind(
        identifier,
        \x -> always(ast_pattern.IdentifierPattern.create(x.loc, x))));

// Ellipsis Pattern
////////////////////////////////////////
ellipsisPattern = Parser('Ellipsis Pattern',
    bind(
        punctuator('...'),
        \x -> always(ast_pattern.EllipsisPattern.create(x.loc))));

// Array Pattern
////////////////////////////////////////
arrayPattern = Parser('Array Pattern',
    nodea(
        enumeration(
            optional(null, identifierPattern),
            between(punctuator('['), punctuator(']'),
                eager(sepBy1(punctuator(','), pattern)))),
        ast_pattern.ArrayPattern.create));

// Object Pattern
////////////////////////////////////////
var objectPatternElement = either(
    node(
        identifierPattern,
        \loc, key -> ast_pattern.ObjectPatternElement.create(loc, key, null)),
    nodea(
        enumeration(
            stringLiteral,
            next(
                punctuator(':'),
                pattern)),
        ast_pattern.ObjectPatternElement.create));

objectPattern = Parser('Object Pattern',
    nodea(
        enumeration(
            optional(null, identifierPattern),
            between(punctuator('{'), punctuator('}'),
                eager(sepBy1(punctuator(','), objectPatternElement)))),
        ast_pattern.ObjectPattern.create));

// Import Pattern
////////////////////////////////////////
importPattern = Parser('Import Pattern',
    next(
        keyword('import'),
        nodea(
            enumeration(
                stringLiteral,
                either(
                    attempt(objectPattern),
                    identifierPattern)),
            ast_pattern.ImportPattern.create)));

// Pattern
////////////////////////////////////////
pattern = Parser('Pattern',
    choice(
        ellipsisPattern,
        importPattern,
        attempt(arrayPattern),
        attempt(objectPattern),
        identifierPattern));

}