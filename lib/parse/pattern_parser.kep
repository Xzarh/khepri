/**
 * @fileOverview Khepri patterns parsers.
 */
package (
    pattern,
    identifier,
    ellipsis,
    importPattern,
    arrayPattern,
    objectPattern)
with
    import 'parse/parse' parse {Parser},
    import 'parse/lang' parse_lang,
    import 'ecma/parse/common' {node, nodea},
    import 'ecma/parse/token_parser' token,
    import 'khepri_ast/pattern' ast_pattern,
    import  'khepri/parse/value_parser' value
in {

/* Forward
 ******************************************************************************/
pattern = \... -> pattern.apply(undefined, arguments);

/* Parsers
 ******************************************************************************/
identifier = Parser('Identifier Pattern',
    parse.bind(
        value.identifier,
        \x -> parse.always(ast_pattern.IdentifierPattern.create(x.loc, x))));

/**
 * 
 */
ellipsis = Parser('Ellipsis Pattern',
    parse.bind(
        token.punctuator('...'),
        \x -> parse.always(ast_pattern.EllipsisPattern.create(x.loc))));

/**
 * 
 */
arrayPattern = Parser('Array Pattern',
    nodea(
        parse.enumeration(
            parse.optional(null, identifier),
            parse_lang.between(token.punctuator('['), token.punctuator(']'),
                parse.eager(parse_lang.sepBy1(token.punctuator(','), pattern)))),
        ast_pattern.ArrayPattern.create));

/**
 * 
 */
var objectKeyPattern = parse.either(
    parse.bind(identifier, \key -> parse.always({
        'key': key
    })),
    parse.binds(
        parse.enumeration(
            value.stringLiteral,
            parse.next(
                token.punctuator(':'),
                pattern)),
        \key, value -> parse.always({
            'key': key,
            'value': value
        })));

/**
 * 
 */
objectPattern = Parser('Object Pattern',
    nodea(
        parse.enumeration(
            parse.optional(null, identifier),
            parse_lang.between(token.punctuator('{'), token.punctuator('}'),
                parse.eager(parse_lang.sepBy1(token.punctuator(','), objectKeyPattern)))),
        ast_pattern.ObjectPattern.create));

/**
 * Package Import
 */
importPattern = Parser('Import Pattern',
    parse.next(
        token.keyword('import'),
        nodea(
            parse.enumeration(
                value.stringLiteral,
                parse.either(
                    parse.attempt(objectPattern),
                    identifier)),
            ast_pattern.ImportPattern.create)));

/**
 */
pattern = Parser('Pattern',
    parse.choice(
        ellipsis,
        parse.attempt(arrayPattern),
        parse.attempt(objectPattern),
        identifier));

}