/**
 * @fileOverview Khepri expression parsers.
 */
package (
// Array Literal
    arrayElement
    arrayElements
    arrayLiteral
    
// Object Literal
    propertyName
    propertyInitializer
    objectProperties
    objectLiteral
    
// Curry Expression
    curryExpression
    
// Primary Expression
    primaryExpression

// Call Expression
    args
    argumentList
    
// Member Expression
    dotAccessor
    bracketAccessor
    accessor
    memberExpression
    
// New Expression
    newExpression
    
// Left hand side expression
    leftHandSideExpression
    leftHandReferenceExpression
    
// Unary Expression
    unaryOperator
    unaryExpression
    
// Binary Expfression
    binaryExpression
    
// Conditional Expression
    conditionalExpression

// Let Expression
    letExpression

// Assignment
    assignmentOperator
    assignmentExpression

// Expression
    expression
    
    topLevelExpression)
with
    import 'bennu::parse' {
        always
        append
        attempt
        bind
        binds
        choice
        cons
        eager
        either
        enumeration
        expected
        lookahead
        many
        memo
        next
        optional
        Parser},
    import 'bennu::lang' {
        between
        sepBy
        sepBy1
        then},
    import 'nu-stream::stream' {foldl foldr},
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    import 'khepri::position' {SourceLocation},
    import 'khepri::parse::common' {node nodea precedence},
    import 'khepri::parse::token_parser' {keyword punctuator},
    import 'khepri::parse::program_parser' program_parser,
    import 'khepri::parse::value_parser' {identifier literal stringLiteral},
    import 'khepri::parse::pattern_parser' pattern
in {

/* Circular Declarations 
 ******************************************************************************/
var sourceElements = \args(...) -> {
    with
        import 'khepri::parse::program_parser' {sourceElements}
    in {
        return sourceElements.apply(undefined, args);
    }
};

/* Forward Declarations
 ******************************************************************************/
expression = \args(...) -> expression.apply(undefined, args);

newExpression = \args(...) -> newExpression.apply(undefined, args);

memberExpression = \args(...) -> memberExpression.apply(undefined, args);

/* Parsers
 ******************************************************************************/
// Array Literal
////////////////////////////////////////
/**
 * Parser for an element in an array literal.
 */
arrayElement = Parser('Array Element',
    expression);

/**
 * Parser for the elements of an array literal.
 */
arrayElements = (Parser, 'Array Elements') <|
    eager <| sepBy(punctuator(','), arrayElement)
        |> (expected, "array element");

/**
 * Parser for an ECMASccript array literal.
 */
arrayLiteral = (Parser, 'Array Literal') <|
    node(
        between(punctuator('['), punctuator(']'),
            arrayElements),
        ast_expression.ArrayExpression.create);

// Object Literal
////////////////////////////////////////
/**
 * Parser for an object property name.
 */
propertyName = (Parser, 'Property Name') <|
    stringLiteral;

/**
 * Parser for any property initializer.
 */
propertyInitializer = (Parser, 'Property Initializer') <|
    nodea(
        enumeration(
            then(
                propertyName,
                punctuator(':')),
            expression),
        ast_value.ObjectValue.create);

/**
 * Parser for a set or more properties in an object literal.
 */
objectProperties = (Parser, 'Object Properties') <|
    eager <| sepBy(punctuator(','), propertyInitializer);

/**
 * Parser for an ECMAScript object literal.
 */
objectLiteral = (Parser, 'Object Literal') <|
    node(
        between(punctuator('{'), punctuator('}'),
            objectProperties),
        ast_expression.ObjectExpression.create);

// Function Expression
////////////////////////////////////////
var formalParameterList = pattern.argumentsPattern;

var statementBody = node(
     between(punctuator('{'), punctuator('}'),
         sourceElements),
    ast_statement.BlockStatement.create);

/// @TODO: this mapping should probably not be here.
var lambdaBody = node(
    expression,
    \loc, x ->
        ast_statement.BlockStatement.create(loc, [
            ast_statement.ReturnStatement.create(null, x)]));

var functionBody = either(
    statementBody,
    lambdaBody);

/**
 * Parser for an function expression.
 * 
 * May be named or anon.
 */
var functionExpression = (Parser, 'Function Expression') <|
    nodea(
        cons(
            optional(null, next(
                keyword('function'),
                optional(null, identifier))),
            next(
                punctuator('\\'),
                enumeration(
                    formalParameterList,
                    next(
                        punctuator('->'),
                        functionBody |> (expected, "function body"))))),
        ast_expression.FunctionExpression.create);

// Let Expression
////////////////////////////////////////
var letBinding = (Parser, 'Let Binding') <|
    nodea(
        enumeration(
            then(
                pattern.topLevelPattern |> (expected, 'pattern'),
                punctuator('=')),
            expression |> (expected, 'let binding expression')),
       ast_declaration.Binding.create);

letExpression = (Parser, 'Let Expression') <| let
    letBindings = sepBy1(punctuator(','),
        letBinding)
        |> (expected, 'let bindings'),
    
    letBody = expression
        |> (expected, 'let body expression')
in
    nodea(
        next(
            keyword('let'),
            enumeration(
                eager(letBindings),
                next(
                    keyword('in'),
                    letBody))),
        ast_expression.LetExpression.create);

// Conditional Expression
////////////////////////////////////////
conditionalExpression = (Parser, 'Conditional Expression') <|
    nodea(
        next(
            punctuator('?'),
            enumeration(
                expression,
                next(
                    punctuator(':'),
                    expression
                    |> (expected, "conditional consequent expression")),
                next(
                    punctuator(':'),
                    expression
                    |> (expected, "conditional alternate expression")))),
        ast_expression.ConditionalExpression.create);

// Operators Expression
////////////////////////////////////////
var unaryOperatorExpression = (Parser, 'Unary Operator Expression') <|
    bind(
        either(
            keyword('typeof'),
            punctuator(
                'void',
                '~',
                '!')),
        \{loc, value} -> always(ast_expression.UnaryOperatorExpression.create(loc, value)));

var binaryOperatorExpression = (Parser, 'Binary Operator Expression') <|
    bind(
        either(
            keyword('instanceof'),
            punctuator(
                '*',
                '/',
                '+',
                '-',
                '%',
                '<<',
                '>>',
                '>>>',
                '<',
                '>',
                '<=',
                '>=',
                '==',
                '!=',
                '===',
                '!==',
                '&',
                '^',
                '|',
                '||',
                '&&',
                '\\>',
                '|>')),
        \{loc, value} -> always(ast_expression.BinaryOperatorExpression.create(loc, value)));

var ternayOperatorExpression = (Parser, 'Ternary Operator Expression') <|
    bind(
        punctuator('?'),
        \{loc, value} -> always(ast_expression.TernaryOperatorExpression.create(loc, value)));

var operatorExpression = (Parser, 'Operator Expression') <|
    choice(
        unaryOperatorExpression,
        binaryOperatorExpression,
        ternayOperatorExpression);

// Curry Expression
////////////////////////////////////////
curryExpression = (Parser, 'Curry Expression') <| let
    base = either(
        attempt <| expression |> (expected, 'expression'),
        operatorExpression |> (expected, 'curryable operator'))
in
    between(punctuator('('), punctuator(')'),
        nodea(
            enumeration(
                base,
                optional([], next(
                    punctuator(','),
                    eager <| sepBy1(punctuator(','),
                        expression)))),
            \loc, base, elements -> 
                ?elements.length
                    :ast_expression.CurryExpression.create(loc, base, elements)
                    :base));

// Primary Expression
////////////////////////////////////////
primaryExpression = (Parser, 'Primary Expression') <|
    choice(
        letExpression,
        conditionalExpression,
        identifier,
        curryExpression,
        literal,
        arrayLiteral,
        objectLiteral,
        functionExpression);

// Calling
////////////////////////////////////////
argumentList = (Parser, 'Argument List') <| let
    argument = expression |> (expected, "argument")
in
    eager <| sepBy(punctuator(','), argument);

args = (Parser, 'Arguments') <|
    node(
        between(punctuator('('), punctuator(')'),
            argumentList),
        \loc, args -> {
            args.loc = loc;
            args.argument = true;
            return args;
        });

// At Expression
////////////////////////////////////////
var atExpression = (Parser, 'AtExpression') <|
    nodea(
        next(
            punctuator('@'),
            enumeration(
                memberExpression,
                eager <| many(
                    next(
                        optional(null, punctuator(':')),
                        expression)))),
        ast_expression.CallExpression.create);

// Accessor
////////////////////////////////////////
dotAccessor = (Parser, 'Dot Accessor') <|
    node(
        next(
            punctuator('.'),
            identifier),
        \loc, x -> ({
            'loc': loc,
            'property': x,
            'computed': false
        }));

bracketAccessor = (Parser, 'Bracket Accessor') <|
    node(
        between(punctuator('['), punctuator(']'),
            expression |> (expected, "accessor expression")),
        \loc, x -> ({
            'loc': loc,
            'property': x,
            'computed': true
        }));

accessor = (Parser, 'Accessor') <|
    either(
        dotAccessor,
        bracketAccessor);

// Member Expression
////////////////////////////////////////
var accessorReducer = \p, c -> 
    ast_expression.MemberExpression.create(
        SourceLocation.merge(p.loc, c.loc),
        p,
        c.property,
        c.computed);

memberExpression = (Parser, 'Member Expression') <|
    binds(
        enumeration(
            choice(
                atExpression,
                newExpression,
                primaryExpression),
            many(accessor)),
        (foldl, accessorReducer) \>> always);

// New Expression
////////////////////////////////////////
newExpression = (Parser, 'New Expression') <|
    nodea(
        next(
            keyword('new'),
            enumeration(
                memberExpression |> (expected, "member expression"),
                optional([], args))),
        ast_expression.NewExpression.create);

// Left Hand Side Expression
////////////////////////////////////////
leftHandSideExpression = (Parser, 'Left Hand Side Expression') <| let
    reducer = \p, c ->
        ?c && c.hasOwnProperty('argument')
             :ast_expression.CallExpression.create(SourceLocation.merge(p.loc, c.loc), p, c)
             :accessorReducer(p, c)
in
    binds(
        enumeration(
            memberExpression |> memo,
            many(either(
                args,
                accessor))),
        (foldl, reducer) \>> always);

// Left Hand Side Expression
////////////////////////////////////////
leftHandReferenceExpression = (Parser, 'Left Hand Reference Expression') <|
    binds(
        enumeration(
            identifier |> memo,
            many(accessor) |> memo),
        (foldl, accessorReducer) \>> always);

// Unary Expression
////////////////////////////////////////
unaryOperator = (Parser, 'Unary Operator') <|
    either(
        keyword('typeof', 'void'),
        punctuator('+', '-', '~', '!'));

unaryExpression = (Parser, 'Unary Expression') <| let
    reducer = \argument, op -> 
        ast_expression.UnaryExpression.create(
            SourceLocation.merge(op.loc, argument.loc),
            op.value,
            argument)
in
    binds(
        enumeration(
            many(unaryOperator),
            leftHandSideExpression |> (expected, "unary argument")),
        \ops, expression ->
            always(foldr(reducer, expression, ops)));

// Binary Expressions
////////////////////////////////////////
var multiplicativeOperator = punctuator('*', '/', '%');

var additiveOperator = punctuator('+', '-');

var shiftOperator = punctuator('<<', '>>', '>>>');

var relationalOperator = either(
    punctuator('<', '>', '<=', '>='),
    keyword('instanceof'));

var equalityOperator = punctuator('==', '!=', '===', '!==');

var bitwiseANDOperator = punctuator('&');

var bitwiseXOROperator = punctuator('^');

var bitwiseOROperator = punctuator('|');

var logicalANDOperator = punctuator('&&');

var logicalOROperator = punctuator('||');

var composeOperator = punctuator(
    '\\>',
    '\\>>');

var reverseComposeOperator = punctuator(
    '<\\',
    '<<\\');

var pipeOperator = punctuator('|>');

var reversePipeOperator = punctuator('<|');

var precedenceTable = [
    {
        'sep': multiplicativeOperator,
        'precedence': 1,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': additiveOperator,
        'precedence': 2,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': shiftOperator,
        'precedence': 3,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': relationalOperator,
        'precedence': 4,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': equalityOperator,
        'precedence': 5,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': bitwiseANDOperator,
        'precedence': 6,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': bitwiseXOROperator,
        'precedence': 7,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': bitwiseOROperator,
        'precedence': 8,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': logicalOROperator,
        'precedence': 12,
        'node': ast_expression.LogicalExpression
    }, {
        'sep': logicalANDOperator,
        'precedence': 13,
        'node': ast_expression.LogicalExpression
    }, {
        'sep': composeOperator,
        'precedence': 14,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': reverseComposeOperator,
        'precedence': 14,
        'right': true,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': pipeOperator,
        'precedence': 15,
        'node': ast_expression.BinaryExpression
    }, {
        'sep': reversePipeOperator,
        'precedence': 15,
        'right': true,
        'node': ast_expression.BinaryExpression
    }
];

binaryExpression = (Parser, 'Binary Expression') <|
    precedence(
        unaryExpression |> memo,
        precedenceTable);

// Assignment Expression
////////////////////////////////////////
assignmentOperator = punctuator('=');

assignmentExpression = (Parser, 'Assignment Expression') <|
    nodea(
        append(
            attempt <| enumeration(
                leftHandReferenceExpression,
                assignmentOperator),
            enumeration(
                expression |> (expected, 'expression'))),
        \loc, left, op, right ->
            ast_expression.AssignmentExpression.create(loc, op.value, left, right));

// Delete Expression
////////////////////////////////////////
var deleteOperator = keyword('delete');

var deleteExpression = (Parser, 'Delete Expression') <|
    nodea(
        enumeration(
            deleteOperator,
            leftHandReferenceExpression |> (expected, 'reference expression')),
        \loc op expression ->
            ast_expression.UnaryExpression.create(loc, op.value, expression));

// Expression
////////////////////////////////////////
expression = binaryExpression;

// Top Level Expression
////////////////////////////////////////
topLevelExpression = choice(
    deleteExpression,
    assignmentExpression,
    expression);

}