/**
 * @fileOverview Khepri package parsers.
 */
package (
    khepriPackage)
with
    import 'parse/parse' {attempt, eager, either, enumeration, next, optional, Parser},
    import 'parse/lang' {between, sepBy},
    import 'ecma/parse/common' {node, nodea},
    import 'ecma/parse/token_parser' {keyword, punctuator},
    import 'khepri_ast/package' ast_package,
    import 'khepri/parse/value_parser' {identifier, stringLiteral},
    import 'khepri/parse/pattern_parser' {objectPattern, 'identifier': identifierPattern},
    import 'khepri/parse/statement_parser' statement
in {

/* Circular Declarations 
 ******************************************************************************/
var withStatement = \... ->
    require('khepri/parse/statement_parser').withStatement.apply(undefined, arguments);

var blockStatement = \... ->
    require('khepri/parse/statement_parser').blockStatement.apply(undefined, arguments);

/* Parsers
 ******************************************************************************/
/**
 * Package Export
 */
var packageExport = Parser('Package Export',
    node(
        identifier,
        ast_package.PackageExport.create));

/**
 * Package Exports
 */
var packageExports = Parser('Package Exports',
    node(
        between(punctuator('('), punctuator(')'), 
            eager(sepBy(punctuator(','), packageExport))),
        ast_package.PackageExports.create));
/**
 * Package Body
 */
var packageBody = Parser('Package Body',
    either(
        withStatement,
        blockStatement));

/**
 * Package
 */
khepriPackage = Parser('Package',
    next(
        keyword('package'),
        nodea(
            enumeration(
                packageExports,
                packageBody),
            ast_package.Package.create)));

}