/**
 * @fileOverview Khepri package parsers.
 */
package (
    khepriPackage)
with
    import 'bennu/parse' {eager, either, enumeration, expected, next, optional, Parser},
    import 'bennu/lang' {between, sepBy},
    import 'khepri_ast/package' ast_package,
    import 'khepri/parse/common' {node, nodea},
    import 'khepri/parse/token_parser' {keyword, punctuator},
    import 'khepri/parse/value_parser' {identifier},
    import 'khepri/parse/statement_parser' _
in {

/* Circular
 ******************************************************************************/
var withStatement = \args(...) -> {
    with
        import 'khepri/parse/statement_parser' {withStatement}
    in {
        return withStatement.apply(undefined, args);
    }
};

var blockStatement = \args(...) -> {
    with
        import 'khepri/parse/statement_parser' {blockStatement}
    in {
        return blockStatement.apply(undefined, args);
    }
};

/* Parsers
 ******************************************************************************/
var packageExport = @Parser :'Package Export'
    :node(
        identifier,
        ast_package.PackageExport.create);

var packageExports = (Parser, 'Package Exports') <|
    node(
        between(punctuator('('), punctuator(')'), 
            eager <| sepBy(optional(null, punctuator(',')),
                packageExport)),
        ast_package.PackageExports.create);

var packageBody = (Parser, 'Package Body') <|
    either(
        withStatement,
        blockStatement);

khepriPackage = (Parser, 'Package') <|
    nodea(
        next(
            keyword('package'),
            enumeration(
                packageExports |> (expected, 'package export list'),
                packageBody)),
            ast_package.Package.create);

}