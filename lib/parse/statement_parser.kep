/**
 * @fileOverview Parser for ECMAScript 5.1 statements.
 */
static define;
define(['parse/parse',
        'parse/parse_lang',
        'ecma/parse/token_parser',
        'ecma/parse/common',
        'khepri_ast/clause',
        'khepri_ast/declaration',
        'khepri_ast/statement',
        'khepri/parse/expression_parser',
        'khepri/parse/value_parser'],
function(parse,
        parse_lang,
        token,
        ecma_parse,
        ast_clause,
        ast_declaration,
        ast_statement,
        expression,
        value){
"use strict";

/* Forward declarations
 ******************************************************************************/
var statement = function(){ return statement.apply(undefined, arguments); };

/* Statement Parsers
 ******************************************************************************/
var logicalSemiColon = token.punctuator(';');

var statementList = parse.eager(parse.many(statement));

var topLevelExpression = parse.either(
    parse.attempt(expression.assignmentExpression),
    expression.expression);

// Block
////////////////////////////////////////
/**
 * 
 */
var blockStatement = parse.Parser('Block Statement',
    ecma_parse.node(
        parse_lang.between(token.punctuator('{'), token.punctuator('}'), 
            statementList),
        \(loc, body) -> new ast_statement.BlockStatement(loc, body)));

// Static Statement
////////////////////////////////////////
var staticDeclaration = ecma_parse.node(
    value.identifier,
    \(loc, identifier) ->
        new ast_declaration.StaticDeclarator(loc, identifier, null));

var staticDeclarationList = parse.eager(parse_lang.sepBy1(token.punctuator(','),
    staticDeclaration));

/**
 * Parser for a static statement that declares one or more global variables.
 */
var staticStatement = parse.Parser('Static Statement',
     ecma_parse.node(
        parse_lang.between(token.keyword('static'), logicalSemiColon,
            staticDeclarationList),
        \(loc, declarations) -> 
            new ast_declaration.StaticDeclaration(loc, declarations)));

// Variable Statement
////////////////////////////////////////
var initialiser = parse.next(token.punctuator('='),
    topLevelExpression);

var variableDeclaration = ecma_parse.nodea(
    parse.sequence(
        value.identifier,
        parse.optional(null, initialiser)),
    ast_declaration.VariableDeclarator.create);

var variableDeclarationList = parse.eager(parse_lang.sepBy1(token.punctuator(','),
    variableDeclaration));

/**
 * Parser for a variable statement which declares one or more variables with
 * optional initializer values.
 */
var variableStatement = parse.Parser('Variable Statement', 
    ecma_parse.node(
        parse_lang.between(token.keyword('var'), logicalSemiColon,
            variableDeclarationList),
        ast_declaration.VariableDeclaration.create));


// Empty Statement
////////////////////////////////////////
/**
 * 
 */
var emptyStatement = parse.Parser('Empty Statement',
    ecma_parse.node(
        token.punctuator(';'),
        ast_statement.EmptyStatement.create));

// Expression
////////////////////////////////////////
/**
 */
var expressionStatement = parse.Parser('Expression Statement',
    ecma_parse.node(
        parse_lang.then(
            topLevelExpression,
            logicalSemiColon),
        ast_statement.ExpressionStatement.create));

// If
////////////////////////////////////////
/**
 * 
 */
var ifStatement =  parse.Parser('If Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('if'),
            parse.sequence(
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                statement,
                parse.optional(null, parse.next(token.keyword('else'),
                    statement)))),
        ast_statement.IfStatement.create));

// Iteration
////////////////////////////////////////
/**
 * 
 */
var whileStatement = parse.Parser('While Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('while'),
            parse.sequence(
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                statement)),
        ast_statement.WhileStatement.create));

/**
 * 
 */
var doWhileStatement = parse.Parser('Do While Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('do'),
            parse.sequence(
                statement,
                token.keyword('while'),
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                token.punctuator(';'))),
        \(loc, body, _0, test) ->
            new ast_statement.DoWhileStatement(loc, body, test)));

var forInitExpression =  parse.optional(null, 
    parse.either(
        ecma_parse.node(
            parse.next(
                token.keyword('var'),
                parse.memo(variableDeclarationList)),
            ast_declaration.VariableDeclaration.create),
        topLevelExpression));

var forTestExpression = parse.optional(null, topLevelExpression);

var forUpdateExpression = parse.optional(null,
    parse.either(
        parse.attempt(expression.assignmentExpression),
        topLevelExpression));

/**
 * 
 */
var forStatement = parse.Parser('For Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('for'),
            parse.sequence(
                token.punctuator('('),
                forInitExpression,
                token.punctuator(';'),
                forTestExpression,
                token.punctuator(';'),
                forUpdateExpression,
                token.punctuator(')'),
                statement)),
            \(loc, _1, init, _2, test, _3, update, _4, body) ->
                 new ast_statement.ForStatement(loc, init, test, update, body)));

var iterationStatement = parse.Parser('Iteration Statement',
    parse.choice(
        doWhileStatement,
        whileStatement,
        forStatement));

// Continue
////////////////////////////////////////
/**
 */
var continueStatement = parse.Parser('Continue Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('continue'),
            logicalSemiColon),
        ast_statement.ContinueStatement.create));

// Break
////////////////////////////////////////
/**
 */
var breakStatement = parse.Parser('Break Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('break'),
            logicalSemiColon),
        ast_statement.BreakStatement.create));

// Return
////////////////////////////////////////
/**
 */
var returnStatement = parse.Parser('Return Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('return'), logicalSemiColon,
            parse.optional(null, topLevelExpression)),
        ast_statement.ReturnStatement.create));

// Switch
////////////////////////////////////////
var caseClause = ecma_parse.nodea(
    parse.next(
        token.keyword('case'),
        parse.sequence(
            parse_lang.then(
                topLevelExpression,
                token.punctuator(':')),
            statementList)),
    ast_clause.SwitchCase.create);

var defaultClause = ecma_parse.node(
    parse.next(
        token.keyword('default'),
        parse.next(
            token.punctuator(':'),
            statementList)),
    \(loc, consequent) -> new ast_clause.SwitchCase(loc, null, consequent));

var caseClauses = parse.eager(parse.many(caseClause));

var caseBlock = parse_lang.between(token.punctuator('{'), token.punctuator('}'),
    parse.binds(
        parse.sequence(
            parse.optional([], caseClauses),
            parse.optional(null, defaultClause)),
        \first, defaultClause ->
            parse.always(defaultClause ?
                first.concat([defaultClause]) :
                first)));

/**
 * 
 */
var switchStatement = parse.Parser('Switch Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('switch'),
            parse.sequence(
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                caseBlock)),
        ast_statement.SwitchStatement.create));

// Throw
////////////////////////////////////////
/**
 * 
 */
var throwStatement = parse.Parser('Throw Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('throw'), logicalSemiColon,
            topLevelExpression),
        ast_statement.ThrowStatement.create));

// Try
////////////////////////////////////////
var catchBlock = ecma_parse.nodea(
    parse.next(
        token.keyword('catch'),
        parse.sequence(
            parse_lang.between(token.punctuator('('), token.punctuator(')'),
                value.identifier),
            blockStatement)),
    ast_clause.CatchClause.create);

var finallyBlock = parse.next(
    token.keyword('finally'),
    blockStatement);

/**
 * 
 */
var tryStatement = parse.Parser('Try Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('try'),
            parse.sequence(
                blockStatement,
                parse.optional(null, catchBlock),
                parse.optional(null, finallyBlock))),
        ast_statement.TryStatement.create));

// Debugger
////////////////////////////////////////
/**
 * Parser for a debugger statement.
 */
var debuggerStatement = parse.Parser('Debugger Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('debugger'),
            token.punctuator(';')),
        ast_statement.DebuggerStatement.create));

// statement
////////////////////////////////////////
/**
 * 
 */
statement = parse.Parser('Statement',
    parse.expected("statement", parse.choice(
        blockStatement,
        staticStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        expressionStatement)));

/* Export
 ******************************************************************************/
return {
    'blockStatement': blockStatement,
    'staticStatement': staticStatement,
    'variableStatement': variableStatement,
    'emptyStatement': emptyStatement,
    'expressionStatement': expressionStatement,
    'ifStatement': ifStatement,
    'iterationStatement': iterationStatement,
    'continueStatement': continueStatement,
    'breakStatement': breakStatement,
    'returnStatement': returnStatement,
    'switchStatement': switchStatement,
    'throwStatement': throwStatement,
    'tryStatement': tryStatement,
    'debuggerStatement': debuggerStatement,
    
    'statement': statement
};

});