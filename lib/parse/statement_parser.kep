/**
 * @fileOverview Parser for ECMAScript 5.1 statements.
 */
define(['parse/parse', 'parse/parse_eager',
        'ecma/parse/statement_parser',
        'ecma/parse/token_parser',
        'khepri/parse/_common',
        'khepri/parse/expression_parser', 'khepri/parse/value_parser',
        'ecma/ast/clause', 'ecma/ast/declaration', 'ecma/ast/statement'],
function(parse, parse_eager,
        ecma_statement,
        token,
        ecma_parse,
        expression, value,
        astClause, astDeclaration, astStatement){
"use strict";

/* Forward declarations
 ******************************************************************************/
var statement = function(){ return statement.apply(undefined, arguments); };

/* Statement Parsers
 ******************************************************************************/
var logicalSemiColon = token.punctuator(';');

var statementList = parse_eager.many(statement);

// Block
////////////////////////////////////////
/**
 * 
 */
var blockStatement = parse.Parser('Block Statement',
    ecma_parse.astNode(parse.bind(
        parse.between(token.punctuator('{'), token.punctuator('}'), 
            statementList),
        body ->
            parse.always(new astStatement.BlockStatement(body)))));

// Variable Statement
////////////////////////////////////////
var initialiser = parse.next(token.punctuator('='),
    expression.assignmentExpression);

var variableDeclaration = ecma_parse.astNode(parse.binda(
    parse.sequence(
        value.identifier,
        parse.optional(initialiser)),
    (identifier, initialiser) ->
        parse.always(new astDeclaration.VariableDeclarator(identifier, initialiser))));

var variableDeclarationList = parse_eager.sepBy1(token.punctuator(','),
    variableDeclaration);

/**
 * Parser for a variable statement which declares one or more variables with
 * optional initializer values.
 */
var variableStatement = parse.Parser('Variable Statement', 
    ecma_parse.astNode(parse.bind(
        parse.between(token.keyword('var'), logicalSemiColon,
            variableDeclarationList),
        declarations -> 
            parse.always(new astDeclaration.VariableDeclaration(declarations)))));

// Empty Statement
////////////////////////////////////////
/**
 * 
 */
var emptyStatement = parse.Parser('Empty Statement',
    ecma_parse.astNode(parse.bind(
        token.punctuator(';'),
        () ->
            parse.always(new astStatement.EmptyStatement()))));

// Expression
////////////////////////////////////////
/**
 * @TODO: Add lookahead not 'function' check?
 */
var expressionStatement = parse.Parser('Expression Statement',
    ecma_parse.astNode(parse.binda(
        parse.sequence(
            expression.expression,
            logicalSemiColon),
        expression ->
            parse.always(new astStatement.ExpressionStatement(expression)))));

// If
////////////////////////////////////////
/**
 * 
 */
var ifStatement =  parse.Parser('If Statement',
    ecma_parse.astNode(parse.next(token.keyword('if'),
        parse.binda(
            parse.sequence(
                parse.between(token.punctuator('('), token.punctuator(')'),
                    expression.expression),
                statement,
                parse.optional(parse.next(token.keyword('else'),
                    statement))),
            (test, consequent, alternate) ->
                parse.always(new astStatement.IfStatement(test, consequent, alternate))))));

// Iteration
////////////////////////////////////////
/**
 * 
 */
var whileStatement = parse.Parser('While Statement',
    ecma_parse.astNode(parse.next(token.keyword('while'),
        parse.binda(
            parse.sequence(
                parse.between(token.punctuator('('), token.punctuator(')'),
                    expression.expression),
                statement),
            (test, body) -> 
                parse.always(new astStatement.WhileStatement(test, body))))));

/**
 * 
 */
var doWhileStatement = parse.Parser('Do While Statement',
    ecma_parse.astNode(parse.next(token.keyword('do'),
        parse.binda(
            parse.sequence(
                statement,
                token.keyword('while'),
                parse.between(token.punctuator('('), token.punctuator(')'),
                    expression.expression),
                token.punctuator(';')),
            (body, _0, test, _1) ->
                parse.always(new astStatement.DoWhileStatement(body, test))))));

/**
 * 
 */
var forStatement = parse.Parser('For Statement',
    ecma_parse.astNode(parse.next(token.keyword('for'),
        parse.binda(
            parse.sequence(
                token.punctuator('('),
                parse.optional(
                    parse.either(
                        parse.bind(
                            parse.next(token.keyword('var'),
                                parse.memo(variableDeclarationList)),
                            declarations ->
                                parse.always(new astDeclaration.VariableDeclaration(declarations))),
                        expression.expression)),
                token.punctuator(';'),
                parse.optional(expression.expression),
                token.punctuator(';'),
                parse.optional(expression.expression),
                token.punctuator(')'),
                statement),
            (_1, init, _2, test, _3, update, _4, body) ->
                 parse.always(new astStatement.ForStatement(init, test, update, body))))));

var iterationStatement = parse.Parser('Iteration Statement',
    parse.choice(
        doWhileStatement,
        whileStatement,
        forStatement));

// Continue
////////////////////////////////////////
/**
 */
var continueStatement = parse.Parser('Continue Statement',
    ecma_parse.astNode(parse.next(
        token.keyword('continue'),
        parse.bind(
            logicalSemiColon,
            () -> parse.always(new astStatement.ContinueStatement())))));

// Break
////////////////////////////////////////
/**
 */
var breakStatement = parse.Parser('Break Statement',
    ecma_parse.astNode(parse.bind(
        parse.next(token.keyword('break'), logicalSemiColon),
        () -> parse.always(new astStatement.BreakStatement()))));

// Return
////////////////////////////////////////
/**
 */
var returnStatement = parse.Parser('Return Statement',
    ecma_parse.astNode(parse.bind(
        parse.between(token.keyword('return'), logicalSemiColon,
            parse.optional(expression.expression)),
        argument -> parse.always(new astStatement.ReturnStatement(argument)))));

// Switch
////////////////////////////////////////
var caseClause = parse.next(
    token.keyword('case'),
    parse.binda(
        parse.sequence(
            expression.expression,
            token.punctuator(':'),
            statementList),
        (test, _, consequent) ->
            parse.always(new astClause.SwitchCase(test, consequent))));

var defaultClause = parse.next(
    token.keyword('default'),
    parse.next(
        token.punctuator(':'),
        parse.bind(
            statementList,
            consequent -> parse.always(new astClause.SwitchCase(null, consequent)))));

var caseClauses = parse_eager.many(caseClause);

var caseBlock = parse.between(token.punctuator('{'), token.punctuator('}'),
    parse.binda(
        parse.sequence(
            parse.optional(caseClauses),
            parse.optional(defaultClause)),
        (first, defaultClause) ->
            parse.always(defaultClause ?
                first.concat([defaultClause]) :
                first)));

/**
 * 
 */
var switchStatement = parse.Parser('Switch Statement',
    ecma_parse.astNode(parse.next(token.keyword('switch'),
        parse.binda(
            parse.sequence(
                parse.between(token.punctuator('('), token.punctuator(')'),
                    expression.expression),
                caseBlock),
            (discriminant, cases) ->
                 parse.always(new astStatement.SwitchStatement(discriminant, cases))))));

// Throw
////////////////////////////////////////
/**
 * 
 */
var throwStatement = parse.Parser('Throw Statement',
    ecma_parse.astNode(parse.bind(
        parse.between(token.keyword('throw'), logicalSemiColon,
            expression.expression),
        argument -> parse.always(new astStatement.ThrowStatement(argument)))));

// Try
////////////////////////////////////////
var catchBlock = parse.next(token.keyword('catch'),
    parse.binda(
        parse.sequence(
            parse.between(token.punctuator('('), token.punctuator(')'),
                value.identifier),
            blockStatement),
        (param, body) ->
            parse.always(new astClause.CatchClause(param, null, body))));

var finallyBlock = parse.next(token.keyword('finally'),
    blockStatement);

/**
 * 
 */
var tryStatement = parse.Parser('Try Statement',
    ecma_parse.astNode(parse.next(
        token.keyword('try'),
        parse.binda(
            parse.sequence(
                blockStatement,
                parse.optional(catchBlock),
                parse.optional(finallyBlock)),
            (block, handler, finalizer) ->
                parse.always(new astStatement.TryStatement(block, handler, finalizer))))));

// Debugger
////////////////////////////////////////
/**
 * Parser for a debugger statement.
 */
var debuggerStatement = parse.Parser('Debugger Statement',
    ecma_parse.astNode(parse.next(
        token.keyword('debugger'),
        parse.bind(
            token.punctuator(';'),
            () -> parse.always(new astStatement.DebuggerStatement())))));

// statement
////////////////////////////////////////
/**
 * 
 */
statement = parse.Parser('Statement',
    parse.choice(
        blockStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        parse.next(parse.always(null), expressionStatement)));

/* Export
 ******************************************************************************/
return {
    'blockStatement': blockStatement,
    'variableStatement': variableStatement,
    'emptyStatement': emptyStatement,
    'expressionStatement': expressionStatement,
    'ifStatement': ifStatement,
    'iterationStatement': iterationStatement,
    'continueStatement': continueStatement,
    'breakStatement': breakStatement,
    'returnStatement': returnStatement,
    'switchStatement': switchStatement,
    'throwStatement': throwStatement,
    'tryStatement': tryStatement,
    'debuggerStatement': debuggerStatement,
    
    'statement': statement,
};

});