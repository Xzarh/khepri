/**
 * @fileOverview Parser for ECMAScript 5.1 statements.
 */
define(['parse/parse', 'parse/parse_lang',
        'ecma/parse/statement_parser',
        'ecma/parse/token_parser',
        'ecma/parse/common',
        'khepri/parse/expression_parser', 'khepri/parse/value_parser', 'khepri/ast/khepri',
        'ecma/ast/clause', 'ecma/ast/declaration', 'ecma/ast/statement'],
function(parse, parse_lang,
        ecma_statement,
        token,
        ecma_parse,
        expression, value, astKhepri,
        astClause, astDeclaration, astStatement){
"use strict";

/* Forward declarations
 ******************************************************************************/
var statement = function(){ return statement.apply(undefined, arguments); };

/* Statement Parsers
 ******************************************************************************/
var logicalSemiColon = token.punctuator(';');

var statementList = parse.eager(parse.many(statement));

var topLevelExpression = parse.either(
    parse.attempt(expression.assignmentExpression),
    expression.expression);

// Block
////////////////////////////////////////
/**
 * 
 */
var blockStatement = parse.Parser('Block Statement',
    ecma_parse.node(
        parse_lang.between(token.punctuator('{'), token.punctuator('}'), 
            statementList),
        \(loc, body) -> new astStatement.BlockStatement(loc, body)));

// Static Statement
////////////////////////////////////////
var staticDeclaration = ecma_parse.node(
    value.identifier,
    \(loc, identifier) ->
        new astKhepri.StaticDeclarator(loc, identifier, null));

var staticDeclarationList = parse.eager(parse_lang.sepBy1(token.punctuator(','),
    staticDeclaration));

/**
 * Parser for a static statement that declares one or more global variables.
 */
var staticStatement = parse.Parser('Static Statement',
     ecma_parse.node(
        parse_lang.between(token.keyword('static'), logicalSemiColon,
            staticDeclarationList),
        \(loc, declarations) -> 
            new astKhepri.StaticDeclaration(loc, declarations)));

// Variable Statement
////////////////////////////////////////
var initialiser = parse.next(token.punctuator('='),
    topLevelExpression);

var variableDeclaration = ecma_parse.nodea(
    parse.sequence(
        value.identifier,
        parse.optional(null, initialiser)),
    \(loc, identifier, initialiser) ->
        new astDeclaration.VariableDeclarator(loc, identifier, initialiser));

var variableDeclarationList = parse.eager(parse_lang.sepBy1(token.punctuator(','),
    variableDeclaration));

/**
 * Parser for a variable statement which declares one or more variables with
 * optional initializer values.
 */
var variableStatement = parse.Parser('Variable Statement', 
    ecma_parse.node(
        parse_lang.between(token.keyword('var'), logicalSemiColon,
            variableDeclarationList),
        \(loc, declarations) -> new astDeclaration.VariableDeclaration(loc, declarations)));


// Empty Statement
////////////////////////////////////////
/**
 * 
 */
var emptyStatement = parse.Parser('Empty Statement',
    ecma_parse.node(
        token.punctuator(';'),
        \loc ->
            new astStatement.EmptyStatement(loc)));

// Expression
////////////////////////////////////////
/**
 */
var expressionStatement = parse.Parser('Expression Statement',
    ecma_parse.node(
        parse_lang.then(
            topLevelExpression,
            logicalSemiColon),
        \(loc, expression) ->
            new astStatement.ExpressionStatement(loc, expression)));

// If
////////////////////////////////////////
/**
 * 
 */
var ifStatement =  parse.Parser('If Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('if'),
            parse.sequence(
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                statement,
                parse.optional(null, parse.next(token.keyword('else'),
                    statement)))),
        \(loc, test, consequent, alternate) ->
            new astStatement.IfStatement(loc, test, consequent, alternate)));

// Iteration
////////////////////////////////////////
/**
 * 
 */
var whileStatement = parse.Parser('While Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('while'),
            parse.sequence(
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                statement)),
        \(loc, test, body) -> 
            new astStatement.WhileStatement(loc, test, body)));

/**
 * 
 */
var doWhileStatement = parse.Parser('Do While Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('do'),
            parse.sequence(
                statement,
                token.keyword('while'),
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                token.punctuator(';'))),
        \(loc, body, _0, test) ->
            new astStatement.DoWhileStatement(loc, body, test)));

var forInitExpression =  parse.optional(null, 
    parse.either(
        ecma_parse.node(
            parse.next(
                token.keyword('var'),
                parse.memo(variableDeclarationList)),
            \(loc, declarations) ->
                new astDeclaration.VariableDeclaration(loc, declarations)),
        topLevelExpression));

var forTestExpression = parse.optional(null, topLevelExpression);

var forUpdateExpression = parse.optional(null,
    parse.either(
        parse.attempt(expression.assignmentExpression),
        topLevelExpression));

/**
 * 
 */
var forStatement = parse.Parser('For Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('for'),
            parse.sequence(
                token.punctuator('('),
                forInitExpression,
                token.punctuator(';'),
                forTestExpression,
                token.punctuator(';'),
                forUpdateExpression,
                token.punctuator(')'),
                statement)),
            \(loc, _1, init, _2, test, _3, update, _4, body) ->
                 new astStatement.ForStatement(loc, init, test, update, body)));

var iterationStatement = parse.Parser('Iteration Statement',
    parse.choice(
        doWhileStatement,
        whileStatement,
        forStatement));

// Continue
////////////////////////////////////////
/**
 */
var continueStatement = parse.Parser('Continue Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('continue'),
            logicalSemiColon),
        \loc -> new astStatement.ContinueStatement(loc)));

// Break
////////////////////////////////////////
/**
 */
var breakStatement = parse.Parser('Break Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('break'),
            logicalSemiColon),
        \loc -> new astStatement.BreakStatement(loc)));

// Return
////////////////////////////////////////
/**
 */
var returnStatement = parse.Parser('Return Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('return'), logicalSemiColon,
            parse.optional(null, topLevelExpression)),
        \(loc, argument) ->
            new astStatement.ReturnStatement(loc, argument)));

// Switch
////////////////////////////////////////
var caseClause = ecma_parse.nodea(
    parse.next(
        token.keyword('case'),
        parse.sequence(
            topLevelExpression,
            token.punctuator(':'),
            statementList)),
    \(loc, test, _, consequent) ->
        new astClause.SwitchCase(loc, test, consequent));

var defaultClause = ecma_parse.node(
    parse.next(
        token.keyword('default'),
        parse.next(
            token.punctuator(':'),
            statementList)),
    \(loc, consequent) -> new astClause.SwitchCase(loc, null, consequent));

var caseClauses = parse.eager(parse.many(caseClause));

var caseBlock = parse_lang.between(token.punctuator('{'), token.punctuator('}'),
    parse.binds(
        parse.sequence(
            parse.optional([], caseClauses),
            parse.optional(null, defaultClause)),
        \(first, defaultClause) ->
            parse.always(defaultClause ?
                first.concat([defaultClause]) :
                first)));

/**
 * 
 */
var switchStatement = parse.Parser('Switch Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('switch'),
            parse.sequence(
                parse_lang.between(token.punctuator('('), token.punctuator(')'),
                    topLevelExpression),
                caseBlock)),
        \(loc, discriminant, cases) ->
             new astStatement.SwitchStatement(loc, discriminant, cases)));

// Throw
////////////////////////////////////////
/**
 * 
 */
var throwStatement = parse.Parser('Throw Statement',
    ecma_parse.node(
        parse_lang.between(token.keyword('throw'), logicalSemiColon,
            topLevelExpression),
        \(loc, argument) -> new astStatement.ThrowStatement(loc, argument)));

// Try
////////////////////////////////////////
var catchBlock = ecma_parse.nodea(
    parse.next(
        token.keyword('catch'),
        parse.sequence(
            parse_lang.between(token.punctuator('('), token.punctuator(')'),
                value.identifier),
            blockStatement)),
    \(loc, param, body) ->
        new astClause.CatchClause(loc, param, body));

var finallyBlock = parse.next(
    token.keyword('finally'),
    blockStatement);

/**
 * 
 */
var tryStatement = parse.Parser('Try Statement',
    ecma_parse.nodea(
        parse.next(
            token.keyword('try'),
            parse.sequence(
                blockStatement,
                parse.optional(null, catchBlock),
                parse.optional(null, finallyBlock))),
        \(loc, block, handler, finalizer) ->
            new astStatement.TryStatement(loc, block, handler, finalizer)));

// Debugger
////////////////////////////////////////
/**
 * Parser for a debugger statement.
 */
var debuggerStatement = parse.Parser('Debugger Statement',
    ecma_parse.node(
        parse.next(
            token.keyword('debugger'),
            token.punctuator(';')),
        \loc -> new astStatement.DebuggerStatement(loc)));

// statement
////////////////////////////////////////
/**
 * 
 */
statement = parse.Parser('Statement',
    parse.expected("statement", parse.choice(
        blockStatement,
        staticStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        expressionStatement)));

/* Export
 ******************************************************************************/
return {
    'blockStatement': blockStatement,
    'staticStatement': staticStatement,
    'variableStatement': variableStatement,
    'emptyStatement': emptyStatement,
    'expressionStatement': expressionStatement,
    'ifStatement': ifStatement,
    'iterationStatement': iterationStatement,
    'continueStatement': continueStatement,
    'breakStatement': breakStatement,
    'returnStatement': returnStatement,
    'switchStatement': switchStatement,
    'throwStatement': throwStatement,
    'tryStatement': tryStatement,
    'debuggerStatement': debuggerStatement,
    
    'statement': statement
};

});