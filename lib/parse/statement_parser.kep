/**
 * @fileOverview Khepri Statement parsers.
 */
package (
    blockStatement,
    staticStatement,
    variableStatement,
    emptyStatement,
    expressionStatement,
    ifStatement,
    withStatement,
    iterationStatement,
    continueStatement,
    breakStatement,
    returnStatement,
    switchStatement,
    throwStatement,
    tryStatement,
    debuggerStatement,
    statement)
with
    import 'parse/parse' parse {
        always,
        attempt,
        binds,
        choice,
        eager,
        either,
        enumeration,
        expected,
        many,
        memo,
        next,
        optional,
        Parser},
    import 'parse/lang' {between, sepBy1, then},
    import 'khepri_ast/clause' ast_clause,
    import 'khepri_ast/declaration' ast_declaration,
    import 'khepri_ast/statement' ast_statement,
    import 'khepri/parse/common' {node, nodea},
    import 'khepri/parse/token_parser' {keyword, punctuator},
    import 'khepri/parse/expression_parser' {assignmentExpression, expression, topLevelExpression},
    import 'khepri/parse/pattern_parser' {importPattern, pattern},
    import 'khepri/parse/value_parser' {identifier}
in {

/* Forward declarations
 ******************************************************************************/
statement = \args(...) -> statement.apply(undefined, args);

/* Statement Parsers
 ******************************************************************************/
var logicalSemiColon = punctuator(';');

var statementList = eager(many(statement));

// Block Statement
////////////////////////////////////////
blockStatement = Parser('Block Statement',
    node(
        between(punctuator('{'), punctuator('}'), 
            statementList),
        ast_statement.BlockStatement.create));

// Empty Statement
////////////////////////////////////////
emptyStatement = Parser('Empty Statement',
    node(
        punctuator(';'),
        ast_statement.EmptyStatement.create));

// Debugger Statement
////////////////////////////////////////
debuggerStatement = Parser('Debugger Statement',
    node(
        next(
            keyword('debugger'),
            punctuator(';')),
        ast_statement.DebuggerStatement.create));

// Expression Statement
////////////////////////////////////////
expressionStatement = Parser('Expression Statement',
    node(
        then(
            topLevelExpression,
            logicalSemiColon),
        ast_statement.ExpressionStatement.create));

// Static Declaration Statement
////////////////////////////////////////
staticStatement = Parser('Static Statement', let
    staticDeclaration = node(
        identifier,
        ast_declaration.StaticDeclarator.create),
    
    staticDeclarationList =
        eager <|
        sepBy1(punctuator(','),
            staticDeclaration)
in
    node(
        between(keyword('static'), logicalSemiColon,
            staticDeclarationList),
        ast_declaration.StaticDeclaration.create));

// Variable Declaration Statement
////////////////////////////////////////
var variableDeclarationList = let
    initialiser = next(
        punctuator('='),
        expected('expression', topLevelExpression)),

    variableDeclaration = nodea(
        enumeration(
            identifier,
            optional(null, initialiser)),
        ast_declaration.VariableDeclarator.create)
in
    eager <|
    sepBy1(punctuator(','),
        variableDeclaration);

variableStatement = Parser('Variable Statement',
    node(
        between(keyword('var'), logicalSemiColon,
            variableDeclarationList),
        ast_declaration.VariableDeclaration.create));

// With Statement
////////////////////////////////////////
withStatement = Parser('With Statement', let
    withIdentifier = expected("pattern", pattern),

    withBinding = either(
        importPattern,
        nodea(
            enumeration(
                then(
                    withIdentifier,
                    punctuator('=')),
                expression),
            ast_declaration.Binding.create)),
    
    bindings =
        eager <|
        sepBy1(punctuator(','),
            withBinding)
in
    nodea(
        next(
            keyword('with'),
            enumeration(
                bindings,
                next(
                    keyword('in'),
                    blockStatement))),
        ast_statement.WithStatement.create));

// If Statement
////////////////////////////////////////
ifStatement = Parser('If Statement',
    nodea(
        next(
            keyword('if'),
            enumeration(
                between(punctuator('('), punctuator(')'),
                    topLevelExpression),
                statement,
                optional(null, next(
                    keyword('else'),
                    statement)))),
        ast_statement.IfStatement.create));

// Switch Statement
////////////////////////////////////////
switchStatement = Parser('Switch Statement', let
    caseClause = nodea(
        next(
            keyword('case'),
            enumeration(
                then(
                    topLevelExpression,
                    punctuator(':')),
                statementList)),
        ast_clause.SwitchCase.create),

    defaultClause = node(
        next(
            keyword('default'),
            next(
                punctuator(':'),
                statementList)),
        \loc, consequent -> ast_clause.SwitchCase.create(loc, null, consequent)),

    caseClauses = eager(many(caseClause)),

    caseBlock = between(punctuator('{'), punctuator('}'),
        binds(
            enumeration(
                optional([], caseClauses),
                optional(null, defaultClause)),
            \first, defaultClause ->
                always(defaultClause ?
                    first.concat([defaultClause]) :
                    first)))
in
    nodea(
        next(
            keyword('switch'),
            enumeration(
                between(punctuator('('), punctuator(')'),
                    topLevelExpression),
                caseBlock)),
        ast_statement.SwitchStatement.create));

// Iteration Statement
////////////////////////////////////////
var whileStatement = Parser('While Statement',
    nodea(
        next(
            keyword('while'),
            enumeration(
                between(punctuator('('), punctuator(')'),
                    topLevelExpression),
                statement)),
        ast_statement.WhileStatement.create));

var doWhileStatement = Parser('Do While Statement',
    nodea(
        next(
            keyword('do'),
            enumeration(
                then(
                    statement,
                    keyword('while')),
                between(punctuator('('), punctuator(')'),
                    topLevelExpression),
                punctuator(';'))),
        ast_statement.DoWhileStatement.create));

var forStatement = Parser('For Statement', let
    forInitExpression = optional(null, 
        either(
            node(
                next(
                    keyword('var'),
                    memo(variableDeclarationList)),
                ast_declaration.VariableDeclaration.create),
            topLevelExpression)),
    
    forTestExpression = optional(null, topLevelExpression),
    
    forUpdateExpression = optional(null,
        either(
            attempt(assignmentExpression),
            topLevelExpression))
in
    nodea(
        next(
            keyword('for'),
            enumeration(
                next(
                    punctuator('('),
                    forInitExpression),
                next(
                    punctuator(';'),
                    forTestExpression),
                next(
                    punctuator(';'),
                    forUpdateExpression),
                next(
                    punctuator(')'),
                    statement))),
        ast_statement.ForStatement.create));

iterationStatement = Parser('Iteration Statement',
    choice(
        doWhileStatement,
        whileStatement,
        forStatement));

// Continue Statement
////////////////////////////////////////
continueStatement = Parser('Continue Statement',
    node(
        next(
            keyword('continue'),
            logicalSemiColon),
        ast_statement.ContinueStatement.create));

// Break Statement
////////////////////////////////////////
breakStatement = Parser('Break Statement',
    node(
        next(
            keyword('break'),
            logicalSemiColon),
        ast_statement.BreakStatement.create));

// Return Statement
////////////////////////////////////////
returnStatement = Parser('Return Statement',
    node(
        between(keyword('return'), logicalSemiColon,
            optional(null, topLevelExpression)),
        ast_statement.ReturnStatement.create));

// Throw Statement
////////////////////////////////////////
throwStatement = Parser('Throw Statement',
    node(
        between(keyword('throw'), logicalSemiColon,
            topLevelExpression),
        ast_statement.ThrowStatement.create));

// Try Statement
////////////////////////////////////////
tryStatement = Parser('Try Statement', let
    catchBlock = nodea(
        next(
            keyword('catch'),
            enumeration(
                between(punctuator('('), punctuator(')'),
                    identifier),
                blockStatement)),
        ast_clause.CatchClause.create),

    finallyBlock = next(
        keyword('finally'),
        blockStatement)
in
    nodea(
        next(
            keyword('try'),
            enumeration(
                blockStatement,
                optional(null, catchBlock),
                optional(null, finallyBlock))),
        ast_statement.TryStatement.create));


// Statement
////////////////////////////////////////
statement = Parser('Statement',
    expected("statement", choice(
        blockStatement,
        staticStatement,
        variableStatement,
        emptyStatement,
        ifStatement,
        withStatement,
        iterationStatement,
        continueStatement,
        breakStatement,
        returnStatement,
        switchStatement,
        throwStatement,
        tryStatement,
        debuggerStatement,
        expressionStatement)));

}