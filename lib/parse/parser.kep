/**
 * @fileOverview
 */
static define;
define(['parse/parse',
        'nu/stream',
        'ecma/position',
        'ecma/parse/parser',
        'khepri_ast/token',
        'khepri/parse/program_parser'],
function(parse,
        stream,
        position,
        parser,
        lexToken,
        program){
"use strict";

/* Streams
 ******************************************************************************/
/**
 * Maps a lex stream to a parse stream.
 * 
 * @param s Stream of tokens.
 * 
 * @return Stream suitable for parsing.
 */
var parserStream = let 
    langElementFilter = \x -> {
        switch (x.type) {
        case 'Whitespace':
        case 'LineTerminator':
        case 'Comment':
            return false;
        default:
            return true;
        }
    }
in
    \s -> stream.filter(langElementFilter, s);

/* State
 ******************************************************************************/
var ParserState = function(stream, pos, prevEnd) {
    parse.ParserState.call(this, stream, pos);
    this._prevEnd = prevEnd;
};
ParserState.prototype = new parse.ParserState;

ParserState.prototype.next = \tok -> {
    if (!this._next) {
        var rest = stream.rest(this.input);
        var end = (stream.isEmpty(rest) ? tok.loc.end : stream.first(rest).loc.start);
        var s = new ParserState(rest, this.position.increment(tok, end), this.loc.end);
        this._next = \_, m, cok -> cok(tok, s, m);
    }
    return this._next;
};

Object.defineProperty(ParserState.prototype, 'loc', {
    'get': \() ->
        (stream.isEmpty(this.input) ?
            new position.SourceLocation(this._prevEnd, this._prevEnd) :
            stream.first(this.input).loc)
});

/* Running
 ******************************************************************************/
/**
 * Parses a lex stream into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param s Stream of tokens.
 * 
 * @return AST.
 */
var parseStream = \s ->
    parse.runState(
        program.program,
        new ParserState(
            parserStream(s),
            new parser.ParserPosition(
                parse.Position.initial,
                position.SourcePosition.initial),
            position.SourcePosition.initial));

/**
 * Parses a lex array into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param input Array like object of tokens.
 * 
 * @return AST.
 */
var parseInput = \input ->
    parseStream(stream.from(input));

/* Export
 ******************************************************************************/
return {
    'parserStream': parserStream,
    
    'parse': parseInput,
    'parseStream': parseStream
};

});