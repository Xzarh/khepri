/**
 * @fileOverview
 */
static define;
define(['parse/parse',
        'nu/stream',
        'ecma/position',
        'ecma/parse/parser',
        'khepri_ast/token',
        'khepri/parse/program_parser'],
function(parse,
        stream,
        position,
        parser,
        lexToken,
        program){
"use strict";

/* Streams
 ******************************************************************************/
/**
 * Maps a lex stream to a parse stream.
 * 
 * @param s Stream of tokens.
 * 
 * @return Stream suitable for parsing.
 */
var parserStream = let 
    langElementFilter = \x -> {
        switch (x.type) {
        case 'Whitespace':
        case 'LineTerminator':
        case 'Comment':
            return false;
        default:
            return true;
        }
    }
in
    \s -> stream.filter(langElementFilter, s);

/* Running
 ******************************************************************************/
/**
 * Parses a lex stream into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param s Stream of tokens.
 * 
 * @return AST.
 */
var parseStream = \s ->
    parse.runState(
        program.program,
        new parser.ParserState(
            parserStream(s),
            new parser.ParserPosition(
                parse.Position.initial,
                position.SourcePosition.initial),
            position.SourcePosition.initial));

/**
 * Parses a lex array into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param input Array like object of tokens.
 * 
 * @return AST.
 */
var parseInput = \input, ast ->
    parseStream(stream.from(input), ast);

/* Export
 ******************************************************************************/
return {
    'parserStream': parserStream,
    
    'parse': parseInput,
    'parseStream': parseStream
};

});