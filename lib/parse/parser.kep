/**
 * @fileOverview
 */
package (
    parserStream
    ParserPosition
    ParserState
    
    parseInput
    parseStream)
with
    import 'parse/parse' parse,
    import 'nu-stream/stream' {first filter isEmpty rest NIL 'from': streamFrom},
    import 'khepri/position' {SourceLocation SourcePosition},
    import 'khepri/parse/program_parser' {program}
in {

/* Streams
 ******************************************************************************/
/**
 * Maps a lex stream to a parse stream.
 * 
 * @param s Stream of tokens.
 * 
 * @return Stream suitable for parsing.
 */
parserStream = (filter,
    \x -> {
        switch (x.type) {
        case 'Whitespace':
        case 'LineTerminator':
        case 'Comment':
            return false;
        default:
            return true;
        }
    });

/* Position
 ******************************************************************************/
/**
 * Position in an ECMAScript parser.
 * 
 * Tracks position in lex stream and source positions.
 */
ParserPosition = function(tokenPosition, sourcePosition) {
    this.tokenPosition = tokenPosition;
    this.sourcePosition = sourcePosition;
};
ParserPosition.prototype = new parse.Position;
ParserPosition.prototype.constructor = ParserPosition;

ParserPosition.initial = new ParserPosition(
    parse.Position.initial,
    SourcePosition.initial);

ParserPosition.prototype.increment = \tok, end ->
    new ParserPosition(this.tokenPosition.increment(tok), end);

ParserPosition.prototype.toString = \() ->
    '' + this.sourcePosition;

ParserPosition.prototype.compare = \pos ->
    this.tokenPosition.compare(pos.tokenPosition);

/* State
 ******************************************************************************/
ParserState = function(input, pos, prevEnd) {
    parse.ParserState.call(this, input, pos);
    this._prevEnd = prevEnd;
};
ParserState.prototype = new parse.ParserState;

ParserState.initial = new ParserState(NIL,
    ParserPosition.initial,
    SourcePosition.initial);

ParserState.prototype.setInput = \input ->
    new ParserState(
        input,
        this.position,
        this._prevEnd);
    
ParserState.prototype.setPosition = \position ->
    new ParserState(
        this.input,
        position,
        this._prevEnd);
    
ParserState.prototype.next = \tok -> {
    if (!this._next) {
        var r = rest(this.input);
        var end = (isEmpty(r) ? tok.loc.end : first(r).loc.start);
        var s = new ParserState(r, this.position.increment(tok, end), this.loc.end);
        this._next = \_, m, cok -> cok(tok, s, m);
    }
    return this._next;
};

Object.defineProperty(ParserState.prototype, 'loc', {
    'get': \() ->
        (isEmpty(this.input) ?
            new SourceLocation(this._prevEnd, this._prevEnd) :
            first(this.input).loc)
});

/* Running
 ******************************************************************************/
/**
 * Parses a lex stream into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param s Stream of tokens.
 * 
 * @return AST.
 */
parseStream = \s ->
    parse.runState(
        program,
        new ParserState(
            parserStream(s),
            ParserPosition.initial));

/**
 * Parses a lex array into an AST.
 * 
 * May throw any parse errors.
 * 
 * @param input Array like object of tokens.
 * 
 * @return AST.
 */
parseInput = streamFrom \> parseStream;

}