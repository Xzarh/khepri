/**
 * @fileOverview Parsers for literals and symbols.
 */
package (
    nullLiteral,
    booleanLiteral,
    numericLiteral,
    stringLiteral,
    regularExpressionLiteral,
    literal,
    identifier)
with
    import 'parse/parse' {always, bind, choice, Parser},
    import 'khepri_ast/value' ast_value,
    import 'khepri/parse/token_parser' token
in {

var literalParser = \kind, p ->
    bind(p, \x ->
        always(ast_value.Literal.create(x.loc, kind, x.value)));

/* Literals
 ******************************************************************************/
nullLiteral = Parser('Null Literal',
    literalParser('null', token.nullLiteral));

booleanLiteral = Parser('Boolean Literal',
    literalParser('boolean', token.booleanLiteral));

numericLiteral = Parser('Numeric Literal',
    literalParser('number', token.numericLiteral));

stringLiteral = Parser('String Literal',
    literalParser('string', token.stringLiteral));

regularExpressionLiteral = Parser('Regular Expression Literal',
    literalParser('regexp', token.regularExpressionLiteral));

literal = Parser('Literal',
    choice(
        nullLiteral,
        booleanLiteral,
        numericLiteral,
        stringLiteral,
        regularExpressionLiteral));

/* Symbols
 ******************************************************************************/
identifier = Parser('Identifier',
    bind(
        token.anyIdentifier,
        \x -> always(new ast_value.Identifier(x.loc, x.value))));

}