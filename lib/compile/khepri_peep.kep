/**
 * 
 */
package (
    optimize)
with
    import 'neith::tree' tree,
    import 'neith::zipper' zipper,

    import 'khepri-ast-zipper' {khepriZipper},
    
    import 'khepri-ast::node' {modify Node setUserData},
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value


in {

var concat = \args(...) ->
    [].concat.apply([], args);
    

var map = \f, x -> [].map.call(x, f);
var reduce = Function.prototype.call.bind(Array.prototype.reduce);

var flatten = \x ->
    ?Array.isArray(x)
        :reduce(x, \p, c -> p.concat(c), [])
        :x;

/*
 ******************************************************************************/
var peepholes = {};

var addPeephole = \type, condition, f -> {
    var entry = {
        'condition': condition,
        'map': f
    };
    peepholes.(type) = ?peepholes.(type) :peepholes.(type).concat(entry) :[entry];
};

/* Peepholes
 ******************************************************************************/
/**
 * Rewrite `return let` to a with statement.
 */
addPeephole('ReturnStatement',
    \node ->
        (node.argument && node.argument.type === 'LetExpression'),
    \node ->
        ast_statement.WithStatement.create(null,
            node.argument.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ReturnStatement.create(node.loc, node.argument.body)])));

/**
 * Rewrite top level let expressions to with statements.
 */
addPeephole('ExpressionStatement',
    \node ->
        (node.expression && node.expression.type === 'LetExpression'),
    \node ->
        ast_statement.WithStatement.create(null,
            node.expression.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ExpressionStatement.create(node.loc, node.expression.body)])));

/**
 * Rewrite top level let expressions to with statements.
 */
addPeephole('ExpressionStatement',
    \node ->
        (  node.expression
        && node.expression.type === 'AssignmentExpression'
        && node.expression.right.type === 'LetExpression'),
    \node ->
        ast_statement.WithStatement.create(null,
            node.expression.right.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ExpressionStatement.create(node.loc,
                    ast_expression.AssignmentExpression.create(node.expression.loc, node.expression.operator,
                        node.expression.left,
                        node.expression.right.body))])));


/**
 * Convert all array patterns to object patterns
 */
addPeephole('ArrayPattern',
    \_ -> true,
    \{loc elements ud} ->
        setUserData(
            ast_pattern.ObjectPattern.create(loc,
                map(\x, i ->
                    ast_pattern.ObjectPatternElement.create(null,
                        ast_value.Literal.create(null, 'number', i),
                        x),
                    elements)),
            ud));

/**
 * Convert all array patterns to object patterns
 */
addPeephole('ObjectPatternElement',
    \node -> !node.target,
    \node#{loc key} -> {
        switch(key.type) {
        case 'IdentifierPattern':
            return ast_pattern.ObjectPatternElement.create(null,
                ast_value.Literal.create(null, 'string', key.id.name),
                key);
            
        case 'AsPattern':
            return ast_pattern.ObjectPatternElement.create(null,
                ast_value.Literal.create(null, 'string', key.id.id.name),
                key);
            
        default:
            return node;
        }
    });

/**
 * Curry nothing is identity.
 */
addPeephole('CurryExpression',
    \node -> !node.args.length,
    \node -> node.base);

/**
 * Flatten currying of curry.
 */
addPeephole('CurryExpression',
    \node -> node.base.type === 'CurryExpression',
    \node ->
        ast_expression.CurryExpression.create(null,
            node.base.base,
            concat(
                node.base.args,
                node.args)));

/**
 * Rewrite left pipe of curried expression to a call.
 */
addPeephole('BinaryExpression',
    \node ->
        (node.operator === '|>' &&
            node.right.type === 'CurryExpression' || node.right.type === 'BinaryOperatorExpression' ||
            node.right.type === 'UnaryOperatorExpression' || node.right.type === 'TernaryOperatorExpression'),
    \node ->
        ast_expression.CallExpression.create(null,
            (?node.right.type === 'CurryExpression' :node.right.base :node.right),
            concat(node.right.args || [], node.left)));

/**
 * Rewrite right pipe of curried expression to a call.
 */
addPeephole('BinaryExpression',
    \{operator left} ->
        (operator === '<|'
        &&  (  left.type === 'CurryExpression'
            || left.type === 'BinaryOperatorExpression'
            || left.type === 'UnaryOperatorExpression'
            || left.type === 'TernaryOperatorExpression')),
    
    \node ->
        ast_expression.CallExpression.create(null,
            (?node.left.type === 'CurryExpression' :node.left.base :node.left),
            concat(node.left.args || [], node.right)));


/* Interface
 ******************************************************************************/
var opt = \z -> {
    var t = tree.modifyNode(\node -> {
        if (!node) return node;
        var transforms = (peepholes[node.type] || []).filter(\x -> x.condition(node));
        return transforms.reduce(\p c -> c.map(p), node);
    }, z);
    
    var next = zipper.nextDfs(t);
    return ?next :opt(next) :t;
};

optimize = \{options ast} ->
    ({
        'options': options,
        'ast': (opt(khepriZipper(ast))
            |> zipper.root
            |> tree.node) });

}
