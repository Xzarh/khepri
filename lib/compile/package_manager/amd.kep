/**
 * @fileOverview
 */
package (
    definePackage)
with
    import 'khepri_ast::declaration' ast_declaration,
    import 'khepri_ast::expression' ast_expression,
    import 'khepri_ast::pattern' ast_pattern,
    import 'khepri_ast::statement' ast_statement,
    import 'khepri_ast::value' ast_value
in {

var concat = Function.prototype.call.bind(Array.prototype.concat);
var map = Function.prototype.call.bind(Array.prototype.map);

var path = \path ->
    path.split('::').join('/');

/* Package Manager
 ******************************************************************************/
definePackage = \loc exports imports targets body -> let
    exportHeader = (exports.length ?
        ast_declaration.VariableDeclaration.create(null,
            map(exports, \x ->
                ast_declaration.VariableDeclarator.create(null,
                    ast_value.Identifier.create(null, x)))) :
        ast_statement.EmptyStatement.create(null)),
    
    exportBody = map(exports, \x ->
        ast_statement.ExpressionStatement.create(null,
            ast_expression.AssignmentExpression.create(null, '=',
                ast_expression.MemberExpression.create(null,
                    ast_value.Identifier.create(null, 'exports'),
                    ast_value.Identifier.create(null, x)),
                ast_value.Identifier.create(null, x)))),
    
    packageBody = ast_expression.FunctionExpression.create(null, null,
        ast_pattern.ArgumentsPattern.create(null, null,
            concat(
                ast_pattern.IdentifierPattern.create(null,
                    ast_value.Identifier.create(null, 'require')),
                ast_pattern.IdentifierPattern.create(null,
                    ast_value.Identifier.create(null, 'exports')),
                map(imports, \x -> targets[x.from.value]))),
        ast_statement.BlockStatement.create(body.loc,
            concat(
                ast_statement.ExpressionStatement.create(null,
                    ast_value.Literal.create(null, 'string', "use strict")),
                exportHeader,
                body,
                exportBody)))
in
    ast_statement.ExpressionStatement.create(loc,
        ast_expression.CallExpression.create(loc,
            ast_value.Identifier.create(null, 'define'),
            [ast_expression.ArrayExpression.create(null,
                concat(
                    ast_value.Literal.create(null, 'string', 'require'),
                    ast_value.Literal.create(null, 'string', 'exports'),
                    map(imports, \x ->
                        ast_value.Literal.create(null, 'string', path(x.from.value))))),
                packageBody]));

}