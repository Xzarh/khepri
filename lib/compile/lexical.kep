/**
 * @fileOverview
 * 
 * @TODO Better data structure (Zipper?) and eliminate mutation.
 */
package (
    check
    checkStage)
with
    import 'khepri-ast::node' ast_node#{setUserData},
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    
    import 'neith::zipper' zipper,
    import 'neith::tree' tree,
    
    import 'khepri-ast-zipper' {khepriZipper},
    
    import 'bes::record' record,
    import 'bes::object' object,
    
    import './scope' {Scope}
in {

var map = Function.prototype.call.bind(Array.prototype.map);
var reduce = Function.prototype.call.bind(Array.prototype.reduce);
var reduceRight = Function.prototype.call.bind(Array.prototype.reduceRight);

/* Continuation
 ******************************************************************************/
var cont = \f, args -> {
    var c = [f, args];
    c._next = true;
    return c;
};

var trampoline = \f -> {
    var value = f;
    while (value && value._next)
        value = value.(0).apply(undefined, value.(1));
    return value;
};

/* State
 ******************************************************************************/
var State = record.declare(null, [
    'ctx',
    'realScope',
    'scope',
    'vars',
    'unique']);

State.addVar = \s id v ->
    s.setVars(object.setProperty(s.vars, id, v, true));

/*
 ******************************************************************************/
var ok = \x -> \s, ok, _ -> ok(x, s);

var error = \x -> \s, _, err -> err(x, s);

var bind = \p f ->
    \s ok err ->
        cont(p, [s, \x, s -> f(x)(s, ok, err), err]);

var next = \p n -> bind(p, \_ -> n);

var seqa = \arr -> reduceRight(arr, \p, c -> next(c, p), ok());

var seq = \args(...) -> seqa(args);

var extract = \s ok, _ -> ok(s, s);

var setState = \s -> \_ ok _ -> ok(s, s);

var modifyState = \f -> bind(extract, \s -> setState(f(s)));

var examineState = \f -> bind(extract, \s -> f(s));

var move = \op -> modifyState(\s -> {
    var c = op(s.ctx);
    return State.setCtx(s, c);
});

var examineScope = \f -> bind(extract, \s -> f(s.scope));

var examineRealScope = \f -> bind(extract, \s -> f(s.realScope));

var modifyScope = \f ->
    \s, ok, err -> let
        scope = f(s.scope),
        newState = State.setScope(s, scope)
    in ok(scope, newState);

var modifyRealScope = \f ->
    \s, ok, err -> let
        scope = f(s.realScope),
        newState = State.setRealScope(s, scope)
    in ok(scope, newState);

var setScope = \s -> modifyScope(\() -> s);

var setRealScope = \s -> modifyRealScope(\() -> s);

/* Operations
 ******************************************************************************/
var pass = ok();

var registerVar = \name ->
    bind(examineState(\s -> ok(s.unique)), \uid ->
        seq(
            modifyState(\s -> s.setUnique(uid + 1)),
            ok(uid)));

/**
 * Create a new lexical block for body.
 */
var block = \body(...) ->
    examineScope(\s ->
        seq(
            setScope(new Scope({}, s, s.mapping)),
            seqa(body),
            setScope(s)));
    
/**
 * Create a new lexical block for body.
 */
var emptyBlock = \body(...) ->
    examineScope(\s ->
        seq(
            setScope(new Scope({}, s, {})),
            seqa(body),
            setScope(s)));

/**
 * Create a new lexical block for body.
 */
var realBlock = \body(...) ->
    examineRealScope(\s ->
        seq(
            setRealScope(new Scope({}, s, {})),
            emptyBlock.apply(undefined, body),
            setRealScope(s)));

/**
 * Test to see if the current scope already contains a binding for id.
 */
var checkCanAddOwnBinding = \id, loc -> 
    examineScope <|\ s ->
        ?!s.hasOwnBinding(id)
            :pass
            :let
                start = loc && loc.start,
                binding = s.getBinding(id),
                end = binding.loc && binding.loc.start
            in
                error("'" + id + "' at:" + start + " already bound for scope from:" + end);

/**
 * 
 */
var hasBinding = \id, loc ->
    examineScope <|\ s ->
        ?s.hasBinding(id)
            :pass
            :error("Undeclared identifier:'" + id + "' at:" + loc);

/**
 * 
 */
var hasFreeBinding = \id, loc ->
    seq(
        hasBinding(id, loc),
        examineScope <|\ s ->
            let current = s.getBinding(id) in
                ?current.reserved
                    :error("Undeclared identifier:'" + id + "' at:" + loc)
                    :pass);

/**
 * 
 */
var checkCanAssign = \id, loc -> 
    examineScope <|\ s ->
        ?s.hasBinding(id)
            :let b = s.getBinding(id) in
                ?b.mutable
                    :pass
                    :error("Assign to immutable variable:'" + id + "' at:"+ loc)
            :pass;

/**
 * 
 */
var getUnusedId = \id, loc -> 
    examineRealScope <|\ s ->
        ok(?s.hasOwnBinding(id) :s.getUnusedId(id) :id);

/**
 * 
 */
var addMapping = \id, newId ->
    modifyScope(\s -> Scope.addMapping(s, id, newId));

/**
 * Adds a new mutable binding in the current scope. Does not perform any checks.
 */
var addMutableBinding = \id, loc -> 
    seq(
         modifyScope(\s -> Scope.addMutableBinding(s, id, loc)),
         modifyRealScope(\s -> Scope.addMutableBinding(s, id, loc)),
         addMapping(id, id));

/**
 * Adds a new immutable binding in the current scope. Does not perform any checks.
 */
var addImmutableBinding = \id, loc -> 
    seq(
         modifyScope(\s -> Scope.addImmutableBinding(s, id, loc)),
         modifyRealScope(\s -> Scope.addImmutableBinding(s, id, loc)),
         addMapping(id, id));

/**
 * Adds a new, and unique, mutable binding in the current scope. Does not perform any checks.
 */
var addUniqueMutableBinding = \id, loc ->
    seq(
        checkCanAddOwnBinding(id, loc),
        examineRealScope <|\ s ->
            ?s.hasOwnBinding(id)
                :let new_id = s.getUnusedId(id) in
                    seq(
                         addMutableBinding(id, loc),
                         addMutableBinding(new_id, loc),
                         addMapping(id, new_id))
                :addMutableBinding(id, loc));

/**
 * 
 */
var addMutableBindingChecked = \id, loc ->
    seq(
        checkCanAddOwnBinding(id, loc),
        addUniqueMutableBinding(id, loc));

var addImmutableBindingChecked = \id, loc ->
    seq(
        checkCanAddOwnBinding(id, loc),
        addImmutableBinding(id, loc));

var addUnusedImmutableBinding = \id, loc ->
    examineRealScope <|\ s ->
        ?s.hasOwnBinding(id)
            :let new_id = s.getUnusedId(id) in
                seq(
                    addImmutableBinding(id, loc),
                    addImmutableBinding(new_id, loc),
                    addMapping(id, new_id))
            :addImmutableBindingChecked(id, loc);

var addUniqueImmutableBinding = \id, loc ->
    seq(
        checkCanAddOwnBinding(id, loc),
        addUnusedImmutableBinding(id, loc));

var addReservedBinding = \id, loc -> 
    seq(
         modifyScope(\s -> Scope.addReservedBinding(s, id, loc)),
         modifyRealScope(\s -> Scope.addReservedBinding(s, id, loc)),
         addMapping(id, id));
    
/*
 ******************************************************************************/
var _check;

/*
 ******************************************************************************/
var child = \f edge ->
    seq(
        move tree.child@edge,
        f,
        move zipper.up);

var checkCtx = \node ->
    _check <| tree.node node;

var checkTop = \s ok err ->
    checkCtx(s.ctx)(s, ok, err);
    
var checkChild = child@checkTop;

var modifyNode = \f ->
    move tree.modifyNode@f;

var setNode = \x ->
    move tree.setNode@x;

/*
 ******************************************************************************/
_check = \node -> {
    
    if (Array.isArray(node)) {
        if (!node.length)
            return pass;
        return seq(
            move(zipper.down),
            seqa(map(node, \_ i -> 
                ?i === node.length - 1
                    :checkTop
                    :next(checkTop, move(zipper.right)))),
            move(zipper.up));
    }
    
    if (!(node instanceof ast_node.Node))
        return pass;
    
    switch (node.type)
    {
// Program
    case 'Program':
        return checkChild('body');
    
// Package
    case 'Package':
        return seq(
            addImmutableBindingChecked('require', null),
            addImmutableBindingChecked('exports', null),
            addImmutableBindingChecked('module', null),
            checkChild('exports'),
            ?node.body.type === 'WithStatement'
                :child(
                    seq(
                        checkChild('bindings'),
                        child(checkChild('body'), 'body')), 'body')
                :child(checkChild('body'), 'body'));
        
    case 'PackageExports':
        return checkChild('exports');
        
    case 'PackageExport':
        return addMutableBindingChecked(node.id.name, node.loc);

// Clause
    case 'CatchClause':
        return block(
            addImmutableBindingChecked(node.param.name, node.param.loc),
            child(checkChild('body'), 'body'));
    
    case 'SwitchCase':
        return seq(
            checkChild('test'),
            checkChild('consequent'));
    
// Declarations
    case 'StaticDeclaration':
    case 'VariableDeclaration':
        return checkChild('declarations');
    
    case 'StaticDeclarator':
        return addImmutableBindingChecked(node.id.name, node.loc);
        
    case 'VariableDeclarator':
        return seq(
            addMutableBindingChecked(node.id.name, node.loc),
            checkChild('id'),
            checkChild('init'));
        
    case 'Binding': 
        return seq(
            checkChild('pattern'),
            checkChild('value'));
        
// Statement
    case 'BlockStatement':
        return block(checkChild('body'));
    
    case 'ExpressionStatement':
        return checkChild('expression');
    
    case 'IfStatement':
        return seq(
            checkChild('test'),
            block(
                checkChild('consequent')),
            block(
                checkChild('alternate')));
        
    case 'WithStatement':
        return block(
            checkChild('bindings'),
            child(checkChild('body'), 'body'));
    
    case 'SwitchStatement':
        return block(
            checkChild('discriminant'),
            checkChild('cases'));
        
    case'ReturnStatement':
    case 'ThrowStatement':
        return checkChild('argument');
    
    case 'TryStatement':
        return seq(
            checkChild('block'),
            block(
                checkChild('handler')),
            block(
                checkChild('finalizer')));
    
    case 'WhileStatement':
        return seq(
            checkChild('test'),
            block(
                checkChild('body')));
    
    case 'DoWhileStatement':
        return seq(
            block(
                checkChild('body')),
            checkChild('test'));
    
    case 'ForStatement':
        return block(
            checkChild('init'),
            checkChild('test'),
            checkChild('update'),
            block(
                checkChild('body')));
    
// Expression
    case 'UnaryExpression':
        return checkChild('argument');
    
     case 'AssignmentExpression':
        return seq(
            checkChild('left'),
            ?node.left.type === 'Identifier'
                :checkCanAssign(node.left.name, node.left.loc.start)
                :pass,
            checkChild('right'));
    
    case 'LogicalExpression':
    case 'BinaryExpression':
        return seq(
            checkChild('left'),
            checkChild('right'));
    
    case 'ConditionalExpression':
        return seq(
            checkChild('test'),
            checkChild('consequent'),
            checkChild('alternate'));
    
    case 'CallExpression':
    case 'NewExpression':
        return seq(
            checkChild('callee'),
            checkChild('args'));
    
    case 'MemberExpression':
        return seq(
            checkChild('object'),
            ?node.computed 
                :checkChild('property')
                :pass);
        
    case 'ArrayExpression':
        return checkChild('elements');
    
    case 'ObjectExpression':
        return checkChild('properties');
    
    case 'LetExpression':
        return block(
            checkChild('bindings'),
            checkChild('body'));
    
    case 'CurryExpression':
        return seq(
            checkChild('base'),
            checkChild('args'));
        
    case 'UnaryOperatorExpression':
    case 'BinaryOperatorExpression':
    case 'TernaryOperatorExpression':
        return pass;
    
// Function
    case 'FunctionExpression':
        return realBlock(
             ?node.id
                 :addImmutableBinding(node.id.name, node.loc)
                 :pass,
             checkChild('params'),
             child(checkChild('body'), 'body'));

// Pattern
    case 'EllipsisPattern':
        return pass;
    
    case 'SinkPattern':
        return bind(
            getUnusedId('_'),
            \x -> seq(
                modifyNode(\node -> {
                    var n = setUserData(node, node.ud || {});
                    var id = ast_value.Identifier.create(null, x);
                    n.ud.id = id;
                    return n;
                }),
                addReservedBinding(x, node.loc)));
    
    case 'IdentifierPattern':
        if (node.reserved)
            return addReservedBinding(node.id.name, node.loc);
        
        return seq(
            addUniqueImmutableBinding(node.id.name, node.loc),
            checkChild('id'),
            modifyNode(\node ->{
                var n = setUserData(node, node.ud || {});
                n.ud.id = ast_value.Identifier.create(null, node.id.name);
                return n;
            }));
        
    case 'ImportPattern':
        return checkChild('pattern');
    
   case 'AsPattern':
        return seq(
            checkChild('id'),
            child(
                seq(
                   modifyNode(\target -> {
                        var n = setUserData(target, target.ud || {});
                        n.ud.id = node.id;
                        return n;
                    }),
                    checkTop),
                'target'));
    
    case 'ArrayPattern':
    case 'ObjectPattern':
        return examineScope(\s -> {
            if (!node.ud || !node.ud.id) {
                var unused = s.getUnusedId('__o');
                var id = ast_pattern.IdentifierPattern.create(node.loc,
                    ast_value.Identifier.create(null, unused));
                id.reserved = true;
                
                var n = setUserData(node, node.ud || {});
                n.ud.id = id;
                return seq(
                    setNode(ast_pattern.AsPattern.create(null, id, node)),
                    checkTop);
            }
            return checkChild('elements');
        });
    
    case 'ObjectPatternElement':
        return seq(
            checkChild('target'),
            checkChild('key'));
        
    case 'ArgumentsPattern':
        return seq(
            checkChild('id'),
            checkChild('elements'),
            checkChild('self'));
    
// Value
    case 'ObjectValue':
        return checkChild('value');
    
    case 'Identifier':
        return let name = node.name in examineScope <|\ s ->
            ?s.hasMapping(name)
                :let mappedName = s.getMapping(name) in
                    seq(
                        modifyNode(\x -> 
                            ast_node.modify(x, {}, {'name': mappedName})),
                        hasFreeBinding(mappedName, node.loc))
                :hasFreeBinding(name, node.loc);
    }
    
    return pass;
};

var builtins = [
    'Array',
    'Boolean',
    'Date',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    'Error',
    'eval',
    'EvalError',
    'Function',
    'Infinity',
    'isFinite',
    'isNaN',
    'JSON',
    'Math',
    'NaN',
    'Number',
    'Object',
    'parseInt',
    'parseFloat',
    'RangeError',
    'ReferenceError',
    'RegExp',
    'String',
    'SyntaxError',
    'TypeError',
    'undefined',
    'URIError'];

/**
 * 
 */
var checkAst = \ast globals -> {
    var scope = reduce(globals, Scope.addImmutableBinding, new Scope({}, null, {}));
    var state = new State(khepriZipper(ast), scope, scope);
    return trampoline(checkTop(state, \x s -> (s.ctx |> zipper.root |> tree.node), \err, s -> { throw err; }));
};

/**
 * 
 */
check = \ast globals ->
    checkAst(ast, globals || builtins);

/**
 * 
 */
checkStage = \{options ast} -> ({
    'ast': check(ast, ((options && options.globals) || builtins)),
    'options': options
});

}