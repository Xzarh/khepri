/**
 * @fileOverview
 * 
 * @TODO Better data structure (Zipper?) and eliminate mutation.
 */
package (
    Scope)
{

var copy = \obj ->
    Object.keys(obj).reduce(\p, c -> {
        p[c] = obj[c];
        return p;
    }, new obj.constructor());

var defineProperty = \obj, prop, descriptor ->
    Object.defineProperty(copy(obj), prop, descriptor);

/* Scope
 ******************************************************************************/
/**
 * Holds information about a lexical scope.
 * 
 * @param record Maps identifiers to binding information for this scope.
 * @param outer Parent scope.
 * @param mappin Maps identifiers to their actual names in this scope.
 */
Scope = function(record, outer, mapping) {
    this.record = record;
    this.outer = outer;
    this.mapping = mapping;
};

/**
 * Does this scope have a given binding?
 */
Scope.prototype.hasOwnBinding = \id ->
    Object.prototype.hasOwnProperty.call(this.record, id);

/**
 * Does this scope or its parents have a given binding?
 */
Scope.prototype.hasBinding = \id ->
    this.hasOwnBinding(id) || (this.outer && this.outer.hasBinding(id));

/**
 * Get information for a given binding. Returns null if binding does not exist.
 */
Scope.prototype.getBinding = \id ->
    this.hasOwnBinding(id) ?
        this.record[id] :
        (this.outer ? this.outer.getBinding(id) : null);

/**
 * Does this scope have its own a mapping for a given identifier.
 */
Scope.prototype.hasOwnMapping = \id ->
    Object.prototype.hasOwnProperty.call(this.mapping, id);

/**
 * Does this scope have any mapping for a given identifier.
 */
Scope.prototype.hasMapping = \id ->
    this.hasOwnMapping(id) || (this.outer && this.outer.hasMapping(id));

/**
 * Get the mapped value for a given identifier.
 */
Scope.prototype.getMapping = \id ->
    (this.hasOwnMapping(id) ?
        this.mapping[id] :
        this.outer && this.outer.getMapping(id));

/**
 * Get an unused identifier in this scope.
 */
Scope.prototype.getUnusedId = \id -> {
    if (!this.hasBinding(id))
        return id;
    for (var i = 0; ; i = i + 1)
        if (!this.hasBinding(id + i))
            return id + i;
};

/**
 * Create a new modified scope with a given binding.
 * 
 * @param s Scope.
 * @param id Identifier for new binding.
 * @param info Binding information.
 */
Scope.addBinding = \s, id, info ->
    new Scope(
        defineProperty(s.record, id, {
            'value': info,
            'enumerable': true,
            'writable': true,
            'configurable': true
        }),
        s.outer,
        s.mapping);

/**
 * Create a new modified scope with a new mutable binding.
 * 
 * @s Scope
 * @param id Identifier for new binding
 * @param loc Location of binding in source code.
 */
Scope.addMutableBinding = \s, id, loc ->
    Scope.addBinding(s, id, {
        'mutable': true,
        'loc': loc
    });

/**
 * Create a new modified scope with a new immutable binding.
 * 
 * @s Scope
 * @param id Identifier for new binding
 * @param loc Location of binding in source code.
 */
Scope.addImmutableBinding = \s, id, loc ->
    Scope.addBinding(s, id, {
        'mutable': false,
        'loc': loc
    });

/**
 * Create a new modified scope with a new reserved binding.
 * 
 * @s Scope
 * @param id Identifier for new binding
 * @param loc Location of binding in source code.
 */
Scope.addReservedBinding = \s, id, loc ->
    Scope.addBinding(s, id, {
        'mutable': false,
        'reserved': true,
        'loc': loc
    });

/**
 * Create a new modified scope with a new mapping
 * 
 * @s Scope
 * @param from Key value.
 * @param to Value to map to.
 */
Scope.addMapping = \s, from, to ->
    new Scope(
        s.record,
        s.outer,
        defineProperty(s.mapping, from, {
            'value': to,
            'enumerable': true,
            'writable': true,
            'configurable': true
        }));

}