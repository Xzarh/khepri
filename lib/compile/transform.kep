/**
 * @fileOverview
 * 
 * @TODO Better data structure (Zipper?) and eliminate mutation.
 */
package (
    transform
    transformStage)
with 
    import 'ecma_ast::clause' ecma_clause,
    import 'ecma_ast::declaration' ecma_declaration,
    import 'ecma_ast::expression' ecma_expression,
    import 'ecma_ast::node' ecma_node,
    import 'ecma_ast::program' ecma_program,
    import 'ecma_ast::statement' ecma_statement,
    import 'ecma_ast::value'ecma_value ,
    
    import 'khepri_ast::clause' khepri_clause,
    import 'khepri_ast::declaration' khepri_declaration,
    import 'khepri_ast::expression' khepri_expression,
    import 'khepri_ast::node' khepri_node#{setUserData},
    import 'khepri_ast::pattern' khepri_pattern,
    import 'khepri_ast::program' khepri_program,
    import 'khepri_ast::statement' khepri_statement,
    import 'khepri_ast::value' khepri_value,
    
    import 'khepri/compile/package_manager/amd' _,
    import 'khepri/compile/package_manager/node' _
in {

var concat = Function.prototype.call.bind(Array.prototype.concat);
var reduce = Function.prototype.call.bind(Array.prototype.reduce);

var filter = \f, a ->  Array.prototype.filter.call(a, f);
var map = \f, a ->  Array.prototype.map.call(a, f);

var flatten = \x ->
    (Array.isArray(x) ?
        reduce(x, concat, []) :
        x);

/**
 * Is an array of source elements strict code?
 */
var isStrict = \elems -> {
    if (elems && elems.length && elems[0].type === 'ExpressionStatement') {
        var first = elems[0].expression;
        return (first && first.type === 'Literal' && first.kind ==='string' && first.value === 'use strict');
    }
    return false;
};


/* Forward
 ******************************************************************************/
var expressionStatement;

var _transform;

/* Values
 ******************************************************************************/
var identifier = \loc, name ->
    ecma_value.Identifier.create(loc, name);

var stringLiteral = \loc, value ->
    ecma_value.Literal.create(loc, 'string', value);

var nullLiteral = \loc ->
    ecma_value.Literal.create(loc, 'null', null);

/* Declaration
 ******************************************************************************/
var variableDeclaration = \loc, declarations ->
    ecma_declaration.VariableDeclaration.create(loc,
        _transform(declarations));

var variableDeclarator = \loc, id, init ->
    ecma_declaration.VariableDeclarator.create(loc,
        _transform(id),
        _transform(init));

/* Unpacks
 ******************************************************************************/
var innerPattern = let
    objectElementUnpack = \base, pattern, key, f -> let
        innerBase = khepri_expression.MemberExpression.create(null, base, key, true)
    in
        (pattern ?
            (flatten <| innerPattern(innerBase, pattern, f)) :
            f(identifier(null, key.value), innerBase))
in
    \base, pattern, f -> {
        switch (pattern.type) {
        case 'IdentifierPattern':
            return f(
                identifier(null, pattern.id.name),
                base);
        
        case 'AsPattern':
            return concat(
                f(pattern.id, base),
                flatten <| innerPattern(pattern.id, pattern.target, f));
        
        case 'ObjectPattern':
            return pattern.elements
                |> (map, \{target key} -> objectElementUnpack(pattern.ud.id, target, key, f))
                |> flatten;
        
        default:
            return [];
        }
    };

/**
 * 
 */
var unpack = let
    make = (variableDeclarator, null)
in
    \pattern, value ->
        innerPattern(value, pattern, make)
            |> flatten;

/* Pattern
 ******************************************************************************/
var identifierPattern = \loc, name ->
    identifier(loc, name);

/* Basic Expressions
 ******************************************************************************/
/**
 * 
 */
var callExpression = \loc, callee, args ->
    ecma_expression.CallExpression.create(loc,
        _transform(callee),
        _transform(args));

/**
 * 
 */
var memberExpression = \loc, object, property, computed ->
    ecma_expression.MemberExpression.create(loc,
        _transform(object),
        _transform(property),
        computed);

/* Statements
 ******************************************************************************/
/**
 * 
 */
var blockStatement = \loc, body ->
    ecma_statement.BlockStatement.create(loc,
        _transform(body));

/**
 * 
 */
expressionStatement = \loc, expression ->
    ecma_statement.ExpressionStatement.create(loc,
        _transform(expression));

/**
 * 
 */
var returnStatement = \loc, argument ->
    ecma_statement.ReturnStatement.create(loc,
        _transform(argument));

/**
 * 
 */
var withStatement = \loc, bindings, body -> let
    vars = bindings
        |> (map, \imp -> {
            var base = (imp.type === 'ImportPattern' ?
                callExpression(null,
                    identifier(null, 'require'),
                    [imp.from]) :
                imp.value);
            return unpack(imp.pattern, base);
        })
        |> flatten,
    
    prefix = (vars.length ?
        variableDeclaration(null, vars) :
        [])
in
    blockStatement(loc,
        concat(
            prefix,
            body.body));

/* Expressions
 ******************************************************************************/
/**
 * 
 */
var functionExpression = \loc, id, parameters, body -> let
    params = parameters.elements
        |> (filter, \x -> x.type !== 'EllipsisPattern')
        |> _transform,
    
    elementsPrefix = parameters.elements
        |> (map, \x -> {
            // Avoid generating redundant unpacks for parameters names.
            switch (x.type) {
            case 'IdentifierPattern':
                return [];
            case 'AsPattern':
                return innerPattern(_transform(x.id), x.target, (variableDeclarator, null));
            default:
                return innerPattern(_transform(x), x, (variableDeclarator, null));
            }
        })
        |> flatten,
    
    argumentsPrefix = concat(
        (parameters.self ?
            variableDeclarator(null,
                _transform(parameters.self),
                ecma_expression.ThisExpression.create(null)) :
            []),
        (parameters.id ?
            variableDeclarator(null,
                _transform(parameters.id),
                identifier(null, 'arguments')) :
            [])),
    
    strict = isStrict(body.body),
    
    prefix = concat(
        elementsPrefix,
        argumentsPrefix)
in
    ecma_expression.FunctionExpression.create(loc,
        _transform(id),
        params,
        blockStatement(body.loc,
            concat(
                (!strict ? [] :
                    khepri_statement.ExpressionStatement.create(null,
                        khepri_value.Literal.create(null, 'string', "use strict"))),
                (prefix.length ? variableDeclaration(null, prefix) : []),
                let block = _transform(body).body in
                    (strict ? block.slice(1): block))));

/**
 * 
 */
var letExpression = \loc, bindings, body ->
    callExpression(loc,
        functionExpression(null,
            null,
            khepri_pattern.ArgumentsPattern.create(null, null, []),
            blockStatement(null, [
                withStatement(null,
                    bindings,
                    blockStatement(null, [
                        returnStatement(null, body)]))])),
     []);

/**
 * 
 */
var curryExpression = \loc, base, args ->
    callExpression(null,
        memberExpression(null,
            base,
            identifier(null, 'bind')),
        concat(
            nullLiteral(null),
            args));

/**
 * 
 */
var assignmentExpression = \loc, operator, left, right ->
    ecma_expression.AssignmentExpression.create(loc,
        operator,
        _transform(left),
        _transform(right));

/**
 * 
 */
var pipeline = \loc, value, target ->
    callExpression(loc,
        target,
        [value]);

/**
 * 
 */
var singleCompose = \loc, f, g ->
    callExpression(loc,
        functionExpression(null, null,
            khepri_pattern.ArgumentsPattern.create(null, null, [
                khepri_pattern.IdentifierPattern.create(null,
                    identifier(null, 'f')),
                khepri_pattern.IdentifierPattern.create(null,
                    identifier(null, 'g'))]),
        blockStatement(null, [
            returnStatement(null, 
                functionExpression(null, null,
                    khepri_pattern.ArgumentsPattern.create(null, null, [
                        khepri_pattern.IdentifierPattern.create(null,
                            identifier(null, 'x'))]),
                    blockStatement(null, [
                        returnStatement(null,
                            callExpression(null,
                                identifier(null, 'f'), [
                                    callExpression(null,
                                        identifier(null, 'g'),
                                        [identifier(null, 'x')])]))])))])),
        [f, g]);

/**
 * 
 */
var multiCompose = \loc, f, g ->
    callExpression(loc,
        functionExpression(null, null,
            khepri_pattern.ArgumentsPattern.create(null, null, [
                khepri_pattern.IdentifierPattern.create(null,
                    identifier(null, 'f')),
                khepri_pattern.IdentifierPattern.create(null,
                    identifier(null, 'g'))]),
        blockStatement(null, [
            returnStatement(null, 
                functionExpression(null, null,
                    khepri_pattern.ArgumentsPattern.create(null, null, []),
                    blockStatement(null, [
                        returnStatement(null,
                            callExpression(null,
                                identifier(null, 'f'), [
                                    callExpression(null,
                                         memberExpression(null,
                                             identifier(null, 'g'),
                                             identifier(null, 'apply')),
                                         [nullLiteral(null),
                                         identifier(null, 'arguments')])]))])))])),
        [f, g]);

/* Package
 ******************************************************************************/
// @TODO: evil
var packageManager;
    
var packageBlock = \loc, exports, body -> let
    imports = (body.type === 'WithStatement' ?
        filter(\x -> x.type === 'ImportPattern', body.bindings) :
        []),
    
    exportedNames = map(\x -> x.id.name, exports.exports),
    
    targets = reduce(imports, \p c -> {
        p[c.from.value] = c.pattern;
        return p;
    }, {}),
    
    fBody = (body.type === 'WithStatement' ?
        khepri_statement.WithStatement.create(null,
            filter(\x -> x.type !== 'ImportPattern', body.bindings),
            body.body) :
        body)
in
    _transform(packageManager.definePackage(loc, exportedNames, imports, targets, fBody));

/* Transform
 ******************************************************************************/
var transformers = {};

var addTransform = \target f -> {
    transformers[target] = f;
};

// Declarations
addTransform('VariableDeclaration', \node ->
    variableDeclaration(node.loc,
        node.declarations));

addTransform('VariableDeclarator', \node ->
    variableDeclarator(node.loc,
        node.id,
        node.init));

addTransform('StaticDeclaration', \node ->
    ecma_statement.EmptyStatement.create(node.loc));

// Clauses
addTransform('CatchClause', \node ->
    ecma_clause.CatchClause.create(node.loc,
        _transform(node.param),
        _transform(node.body)));

addTransform('SwitchCase', \node ->
    ecma_clause.SwitchCase.create(node.loc,
        _transform(node.test),
        _transform(node.consequent)));

// Statement
addTransform('BlockStatement', \node ->
    blockStatement(node.loc,
        node.body));

addTransform('ExpressionStatement', \node ->
    expressionStatement(node.loc,
        node.expression));

addTransform('IfStatement', \node ->
    ecma_statement.IfStatement.create(node.loc,
        _transform(node.test),
        _transform(node.consequent),
        _transform(node.alternate)));
    
addTransform('WithStatement', \node ->
    withStatement(node.loc,
        node.bindings,
        node.body));

addTransform('SwitchStatement', \node ->
    ecma_statement.SwitchStatement.create(node.loc,
        _transform(node.discriminant),
        _transform(node.cases)));

addTransform('ReturnStatement', \node ->
    returnStatement(node.loc,
        node.argument));

addTransform('ThrowStatement', \node ->
    ecma_statement.ThrowStatement.create(node.loc,
        _transform(node.argument)));
    
addTransform('BreakStatement', \node ->
    ecma_statement.BreakStatement.create(node.loc,
        null));

addTransform('ContinueStatement', \node ->
    ecma_statement.ThrowStatement.create(node.loc,
        null));

addTransform('TryStatement', \node ->
    ecma_statement.TryStatement.create(node.loc,
        _transform(node.block),
        _transform(node.handler),
        _transform(node.finalizer)));

addTransform('WhileStatement', \node ->
    ecma_statement.WhileStatement.create(node.loc,
        _transform(node.test),
        _transform(node.body)));

addTransform('DoWhileStatement', \node ->
    ecma_statement.DoWhileStatement.create(node.loc,
        _transform(node.body),
        _transform(node.test)));

addTransform('ForStatement', \node ->
    ecma_statement.ForStatement.create(node.loc,
        _transform(node.init),
        _transform(node.test),
        _transform(node.update),
        _transform(node.body)));

// Expression
addTransform('AssignmentExpression', \node ->
    assignmentExpression(node.loc,
        node.operator,
        node.left,
        node.right));

addTransform('UnaryExpression', \node ->
    ecma_expression.UnaryExpression.create(node.loc,
        node.operator,
        _transform(node.argument)));

addTransform('BinaryExpression', \node -> {
    switch (node.operator) {
    case '\\>':
        return singleCompose(node.loc,
            node.right,
            node.left);
    
    case '\\>>':
        return multiCompose(node.loc,
            node.right,
            node.left);
    
    case '<\\':
        return singleCompose(node.loc,
            node.left,
            node.right);
    
    case '<<\\':
        return multiCompose(node.loc,
            node.left,
            node.right);
    
    case '|>':
        return pipeline(node.loc,
            node.left,
            node.right);
        
    case '<|':
        return pipeline(node.loc,
            node.right,
            node.left);
    
    default:
        return ecma_expression.BinaryExpression.create(node.loc,
            node.operator,
            _transform(node.left),
            _transform(node.right));
    }
});

addTransform('LogicalExpression', \node ->
    ecma_expression.LogicalExpression.create(node.loc,
        node.operator,
        _transform(node.left),
        _transform(node.right)));

addTransform('ConditionalExpression', \node ->
    ecma_expression.ConditionalExpression.create(node.loc,
        _transform(node.test),
        _transform(node.consequent),
        _transform(node.alternate)));

addTransform('NewExpression', \node ->
    ecma_expression.NewExpression.create(node.loc,
        _transform(node.callee),
        _transform(node.args)));

addTransform('CallExpression', \node ->
    callExpression(node.loc,
        node.callee,
        node.args));

addTransform('MemberExpression', \node ->
    ecma_expression.MemberExpression.create(node.loc,
        _transform(node.object),
        _transform(node.property),
        node.computed));

addTransform('LetExpression', \node ->
    letExpression(node.loc,
        node.bindings,
        node.body));

addTransform('CurryExpression', \node ->
    curryExpression(node.loc,
        node.base,
        node.args));

addTransform('UnaryOperatorExpression', \node ->
    functionExpression(node.loc, null,
        khepri_pattern.ArgumentsPattern.create(null, null, [
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'x'))]),
        blockStatement(null, [
            returnStatement(null, 
                khepri_expression.UnaryExpression.create(null,
                    node.op,
                    identifier(null, 'x')))])));

addTransform('BinaryOperatorExpression', \node -> {
    var kind = (node.op === '||' || node.op === '&&' ?
        khepri_expression.LogicalExpression :
        khepri_expression.BinaryExpression);
    
    return functionExpression(node.loc, null,
        khepri_pattern.ArgumentsPattern.create(null, null, [
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'x')),
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'y'))]),
        blockStatement(null, [
            returnStatement(null, 
                kind.create(null,
                    node.op,
                    identifier(null, 'x'),
                    identifier(null, 'y')))]));
});

addTransform('TernaryOperatorExpression', \node ->
    functionExpression(node.loc, null,
        khepri_pattern.ArgumentsPattern.create(null, null, [
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'x')),
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'y')),
                khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'z'))]),
        blockStatement(null, [
            returnStatement(null, 
                khepri_expression.ConditionalExpression.create(null,
                    identifier(null, 'x'),
                    identifier(null, 'y'),
                    identifier(null, 'z')))])));

addTransform('FunctionExpression', \node ->
    functionExpression(node.loc,
        node.id,
        node.params,
        node.body));

addTransform('ArrayExpression', \node ->
    ecma_expression.ArrayExpression.create(node.loc,
        _transform(node.elements)));

addTransform('ObjectExpression', \node ->
    ecma_expression.ObjectExpression.create(node.loc,
        _transform(node.properties)));

addTransform('ObjectValue', \node ->
    ecma_value.ObjectValue.create(node.loc,
        _transform(node.key),
        _transform(node.value)));

// Patterns
addTransform('ArgumentsPattern', \node ->
    identifier(node.loc,
        node.id.name));

addTransform('IdentifierPattern', \node ->
    identifier(node.loc,
        node.id.name));

addTransform('AsPattern', \node ->
    _transform(node.id));

addTransform('ArrayPattern', \node ->
    _transform(node.ud.id));

addTransform('ObjectPattern', \node ->
    _transform(node.ud.id));

addTransform('EllipsisPattern', \node ->
    (node.ud && node.ud.id ?
        _transform(node.ud.id) :
        null));

addTransform('SinkPattern', \node ->
    (node.ud && node.ud.id ?
        _transform(node.ud.id) :
        null));

// Program
addTransform('Program', \node ->
    ecma_program.Program.create(node.loc,
        (Array.isArray(node.body) ?
            _transform(node.body) :
            [_transform(node.body)])));

// Package
addTransform('Package', \node ->
    packageBlock(node.loc,
        node.exports,
        node.body));

/*
 * 
 *****************************************************************************/
_transform = \node -> {
    if (!node)
        return node;
    
    if (Array.isArray(node))
        return map(_transform, node);
    
    if (!(node instanceof khepri_node.Node))
        return node;
    
    var t = transformers[node.type];
    
    if (!t) return node;
    return t(node);
};

transform = \{options ast} -> {
    // @TODO: Much evil
    packageManager = require('khepri/compile/package_manager/amd');
    if (options.package_manager === 'node')
        packageManager = require('khepri/compile/package_manager/node');

    return ({
        'options': options,
        'ast': _transform(ast)
    });
};

}